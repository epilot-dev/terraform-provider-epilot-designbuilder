// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-journey/internal/sdk/pkg/utils"
)

type Design struct {
	LogoURL *string                `json:"logoUrl,omitempty"`
	Theme   map[string]interface{} `json:"theme"`
}

func (o *Design) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *Design) GetTheme() map[string]interface{} {
	if o == nil {
		return map[string]interface{}{}
	}
	return o.Theme
}

type Logics struct {
	Actions         []string `json:"actions"`
	AutoGeneratedID *string  `json:"autoGeneratedId,omitempty"`
	Conditions      []string `json:"conditions"`
}

func (o *Logics) GetActions() []string {
	if o == nil {
		return []string{}
	}
	return o.Actions
}

func (o *Logics) GetAutoGeneratedID() *string {
	if o == nil {
		return nil
	}
	return o.AutoGeneratedID
}

func (o *Logics) GetConditions() []string {
	if o == nil {
		return []string{}
	}
	return o.Conditions
}

type SourceType string

const (
	SourceTypeJourney SourceType = "journey"
	SourceTypeStep    SourceType = "step"
	SourceTypeBlock   SourceType = "block"
)

func (e SourceType) ToPointer() *SourceType {
	return &e
}

func (e *SourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "journey":
		fallthrough
	case "step":
		fallthrough
	case "block":
		*e = SourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceType: %v", v)
	}
}

type Type string

const (
	TypeInject        Type = "inject"
	TypeInjectWithKey Type = "injectWithKey"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inject":
		fallthrough
	case "injectWithKey":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type Rules struct {
	Source     string     `json:"source"`
	SourceType SourceType `json:"sourceType"`
	Target     string     `json:"target"`
	Type       Type       `json:"type"`
}

func (o *Rules) GetSource() string {
	if o == nil {
		return ""
	}
	return o.Source
}

func (o *Rules) GetSourceType() SourceType {
	if o == nil {
		return SourceType("")
	}
	return o.SourceType
}

func (o *Rules) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *Rules) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

type Align string

const (
	AlignLeft   Align = "left"
	AlignCenter Align = "center"
	AlignRight  Align = "right"
)

func (e Align) ToPointer() *Align {
	return &e
}

func (e *Align) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = Align(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Align: %v", v)
	}
}

type Button struct {
	Align *Align  `json:"align,omitempty"`
	Text  *string `json:"text,omitempty"`
}

func (o *Button) GetAlign() *Align {
	if o == nil {
		return nil
	}
	return o.Align
}

func (o *Button) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

type Lang string

const (
	LangDe Lang = "de"
	LangEn Lang = "en"
	LangFr Lang = "fr"
)

func (e Lang) ToPointer() *Lang {
	return &e
}

func (e *Lang) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "de":
		fallthrough
	case "en":
		fallthrough
	case "fr":
		*e = Lang(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lang: %v", v)
	}
}

type Mode string

const (
	ModeFullScreen Mode = "full-screen"
	ModeInline     Mode = "inline"
)

func (e Mode) ToPointer() *Mode {
	return &e
}

func (e *Mode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "full-screen":
		fallthrough
	case "inline":
		*e = Mode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mode: %v", v)
	}
}

type EmbedOptions struct {
	Button      *Button `json:"button,omitempty"`
	Lang        *Lang   `json:"lang,omitempty"`
	Mode        *Mode   `json:"mode,omitempty"`
	ScrollToTop *bool   `json:"scrollToTop,omitempty"`
	TopBar      *bool   `json:"topBar,omitempty"`
	Width       *string `json:"width,omitempty"`
}

func (o *EmbedOptions) GetButton() *Button {
	if o == nil {
		return nil
	}
	return o.Button
}

func (o *EmbedOptions) GetLang() *Lang {
	if o == nil {
		return nil
	}
	return o.Lang
}

func (o *EmbedOptions) GetMode() *Mode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *EmbedOptions) GetScrollToTop() *bool {
	if o == nil {
		return nil
	}
	return o.ScrollToTop
}

func (o *EmbedOptions) GetTopBar() *bool {
	if o == nil {
		return nil
	}
	return o.TopBar
}

func (o *EmbedOptions) GetWidth() *string {
	if o == nil {
		return nil
	}
	return o.Width
}

type RuntimeEntities string

const (
	RuntimeEntitiesOrder       RuntimeEntities = "ORDER"
	RuntimeEntitiesOpportunity RuntimeEntities = "OPPORTUNITY"
)

func (e RuntimeEntities) ToPointer() *RuntimeEntities {
	return &e
}

func (e *RuntimeEntities) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ORDER":
		fallthrough
	case "OPPORTUNITY":
		*e = RuntimeEntities(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RuntimeEntities: %v", v)
	}
}

type Settings struct {
	AddressSuggestionsFileURL *string           `json:"addressSuggestionsFileUrl,omitempty"`
	Description               *string           `json:"description,omitempty"`
	DesignID                  string            `json:"designId"`
	EmbedOptions              *EmbedOptions     `json:"embedOptions,omitempty"`
	EntityID                  *string           `json:"entityId,omitempty"`
	EntityTags                []string          `json:"entityTags,omitempty"`
	FilePurposes              []string          `json:"filePurposes,omitempty"`
	MappingsAutomationID      *string           `json:"mappingsAutomationId,omitempty"`
	OrganizationSettings      map[string]bool   `json:"organizationSettings,omitempty"`
	PublicToken               *string           `json:"publicToken,omitempty"`
	RuntimeEntities           []RuntimeEntities `json:"runtimeEntities,omitempty"`
	SafeModeAutomation        *bool             `json:"safeModeAutomation,omitempty"`
	TargetedCustomer          *string           `json:"targetedCustomer,omitempty"`
	TemplateID                *string           `json:"templateId,omitempty"`
}

func (o *Settings) GetAddressSuggestionsFileURL() *string {
	if o == nil {
		return nil
	}
	return o.AddressSuggestionsFileURL
}

func (o *Settings) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Settings) GetDesignID() string {
	if o == nil {
		return ""
	}
	return o.DesignID
}

func (o *Settings) GetEmbedOptions() *EmbedOptions {
	if o == nil {
		return nil
	}
	return o.EmbedOptions
}

func (o *Settings) GetEntityID() *string {
	if o == nil {
		return nil
	}
	return o.EntityID
}

func (o *Settings) GetEntityTags() []string {
	if o == nil {
		return nil
	}
	return o.EntityTags
}

func (o *Settings) GetFilePurposes() []string {
	if o == nil {
		return nil
	}
	return o.FilePurposes
}

func (o *Settings) GetMappingsAutomationID() *string {
	if o == nil {
		return nil
	}
	return o.MappingsAutomationID
}

func (o *Settings) GetOrganizationSettings() map[string]bool {
	if o == nil {
		return nil
	}
	return o.OrganizationSettings
}

func (o *Settings) GetPublicToken() *string {
	if o == nil {
		return nil
	}
	return o.PublicToken
}

func (o *Settings) GetRuntimeEntities() []RuntimeEntities {
	if o == nil {
		return nil
	}
	return o.RuntimeEntities
}

func (o *Settings) GetSafeModeAutomation() *bool {
	if o == nil {
		return nil
	}
	return o.SafeModeAutomation
}

func (o *Settings) GetTargetedCustomer() *string {
	if o == nil {
		return nil
	}
	return o.TargetedCustomer
}

func (o *Settings) GetTemplateID() *string {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

type Steps struct {
	HideNextButton    *bool       `json:"hideNextButton,omitempty"`
	Name              string      `json:"name"`
	Schema            interface{} `json:"schema"`
	ShowStepName      *bool       `json:"showStepName,omitempty"`
	ShowStepSubtitle  *bool       `json:"showStepSubtitle,omitempty"`
	ShowStepper       *bool       `json:"showStepper,omitempty"`
	ShowStepperLabels *bool       `json:"showStepperLabels,omitempty"`
	StepID            *string     `json:"stepId,omitempty"`
	SubTitle          *string     `json:"subTitle,omitempty"`
	Title             *string     `json:"title,omitempty"`
	Uischema          interface{} `json:"uischema"`
}

func (o *Steps) GetHideNextButton() *bool {
	if o == nil {
		return nil
	}
	return o.HideNextButton
}

func (o *Steps) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Steps) GetSchema() interface{} {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *Steps) GetShowStepName() *bool {
	if o == nil {
		return nil
	}
	return o.ShowStepName
}

func (o *Steps) GetShowStepSubtitle() *bool {
	if o == nil {
		return nil
	}
	return o.ShowStepSubtitle
}

func (o *Steps) GetShowStepper() *bool {
	if o == nil {
		return nil
	}
	return o.ShowStepper
}

func (o *Steps) GetShowStepperLabels() *bool {
	if o == nil {
		return nil
	}
	return o.ShowStepperLabels
}

func (o *Steps) GetStepID() *string {
	if o == nil {
		return nil
	}
	return o.StepID
}

func (o *Steps) GetSubTitle() *string {
	if o == nil {
		return nil
	}
	return o.SubTitle
}

func (o *Steps) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Steps) GetUischema() interface{} {
	if o == nil {
		return nil
	}
	return o.Uischema
}

type Journey struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	BrandID              *string     `json:"brandId,omitempty"`
	CreatedAt            string      `json:"createdAt"`
	CreatedBy            *string     `json:"createdBy,omitempty"`
	Design               *Design     `json:"design,omitempty"`
	JourneyID            *string     `json:"journeyId,omitempty"`
	LastModifiedAt       string      `json:"lastModifiedAt"`
	Logics               []Logics    `json:"logics,omitempty"`
	Name                 string      `json:"name"`
	OrganizationID       string      `json:"organizationId"`
	Revisions            float64     `json:"revisions"`
	Rules                []Rules     `json:"rules,omitempty"`
	Settings             *Settings   `json:"settings,omitempty"`
	Steps                []Steps     `json:"steps"`
	Version              float64     `json:"version"`
}

func (j Journey) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(j, "", false)
}

func (j *Journey) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &j, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Journey) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *Journey) GetBrandID() *string {
	if o == nil {
		return nil
	}
	return o.BrandID
}

func (o *Journey) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *Journey) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Journey) GetDesign() *Design {
	if o == nil {
		return nil
	}
	return o.Design
}

func (o *Journey) GetJourneyID() *string {
	if o == nil {
		return nil
	}
	return o.JourneyID
}

func (o *Journey) GetLastModifiedAt() string {
	if o == nil {
		return ""
	}
	return o.LastModifiedAt
}

func (o *Journey) GetLogics() []Logics {
	if o == nil {
		return nil
	}
	return o.Logics
}

func (o *Journey) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Journey) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *Journey) GetRevisions() float64 {
	if o == nil {
		return 0.0
	}
	return o.Revisions
}

func (o *Journey) GetRules() []Rules {
	if o == nil {
		return nil
	}
	return o.Rules
}

func (o *Journey) GetSettings() *Settings {
	if o == nil {
		return nil
	}
	return o.Settings
}

func (o *Journey) GetSteps() []Steps {
	if o == nil {
		return []Steps{}
	}
	return o.Steps
}

func (o *Journey) GetVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.Version
}
