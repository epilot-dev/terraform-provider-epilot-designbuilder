// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-designbuilder/internal/sdk/internal/utils"
)

type CustomerPortalsType string

const (
	CustomerPortalsTypeWidgetPortalData CustomerPortalsType = "WidgetPortalData"
)

type CustomerPortals struct {
	WidgetPortalData *WidgetPortalData `queryParam:"inline"`

	Type CustomerPortalsType
}

func CreateCustomerPortalsWidgetPortalData(widgetPortalData WidgetPortalData) CustomerPortals {
	typ := CustomerPortalsTypeWidgetPortalData

	return CustomerPortals{
		WidgetPortalData: &widgetPortalData,
		Type:             typ,
	}
}

func (u *CustomerPortals) UnmarshalJSON(data []byte) error {

	var widgetPortalData WidgetPortalData = WidgetPortalData{}
	if err := utils.UnmarshalJSON(data, &widgetPortalData, "", true, true); err == nil {
		u.WidgetPortalData = &widgetPortalData
		u.Type = CustomerPortalsTypeWidgetPortalData
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomerPortals", string(data))
}

func (u CustomerPortals) MarshalJSON() ([]byte, error) {
	if u.WidgetPortalData != nil {
		return utils.MarshalJSON(u.WidgetPortalData, "", true)
	}

	return nil, errors.New("could not marshal union type CustomerPortals: all fields are null")
}

type WidgetsType string

const (
	WidgetsTypeWidgetPortalData WidgetsType = "WidgetPortalData"
)

type Widgets struct {
	WidgetPortalData *WidgetPortalData `queryParam:"inline"`

	Type WidgetsType
}

func CreateWidgetsWidgetPortalData(widgetPortalData WidgetPortalData) Widgets {
	typ := WidgetsTypeWidgetPortalData

	return Widgets{
		WidgetPortalData: &widgetPortalData,
		Type:             typ,
	}
}

func (u *Widgets) UnmarshalJSON(data []byte) error {

	var widgetPortalData WidgetPortalData = WidgetPortalData{}
	if err := utils.UnmarshalJSON(data, &widgetPortalData, "", true, true); err == nil {
		u.WidgetPortalData = &widgetPortalData
		u.Type = WidgetsTypeWidgetPortalData
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Widgets", string(data))
}

func (u Widgets) MarshalJSON() ([]byte, error) {
	if u.WidgetPortalData != nil {
		return utils.MarshalJSON(u.WidgetPortalData, "", true)
	}

	return nil, errors.New("could not marshal union type Widgets: all fields are null")
}

type ConsumerData struct {
	CustomerPortals []CustomerPortals `json:"customer_portals"`
	Widgets         []Widgets         `json:"widgets"`
}

func (o *ConsumerData) GetCustomerPortals() []CustomerPortals {
	if o == nil {
		return []CustomerPortals{}
	}
	return o.CustomerPortals
}

func (o *ConsumerData) GetWidgets() []Widgets {
	if o == nil {
		return []Widgets{}
	}
	return o.Widgets
}
