// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Type string

const (
	TypeWoff2 Type = "WOFF2"
	TypeWoff  Type = "WOFF"
	TypeTtf   Type = "TTF"
	TypeEot   Type = "EOT"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WOFF2":
		fallthrough
	case "WOFF":
		fallthrough
	case "TTF":
		fallthrough
	case "EOT":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type FontResponseURL struct {
	Type *Type   `json:"type,omitempty"`
	URL  *string `json:"url,omitempty"`
}

func (o *FontResponseURL) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *FontResponseURL) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}
