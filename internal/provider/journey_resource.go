// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"epilotjourney/internal/sdk"
	"epilotjourney/internal/sdk/pkg/models/operations"
	"fmt"

	"epilotjourney/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &JourneyResource{}
var _ resource.ResourceWithImportState = &JourneyResource{}

func NewJourneyResource() resource.Resource {
	return &JourneyResource{}
}

// JourneyResource defines the resource implementation.
type JourneyResource struct {
	client *sdk.SDK
}

// JourneyResourceModel describes the resource data model.
type JourneyResourceModel struct {
	BrandID        types.String                    `tfsdk:"brand_id"`
	CreatedBy      types.String                    `tfsdk:"created_by"`
	Design         *JourneyCreationRequestDesign   `tfsdk:"design"`
	JourneyID      types.String                    `tfsdk:"journey_id"`
	Logics         []JourneyCreationRequestLogics  `tfsdk:"logics"`
	Name           types.String                    `tfsdk:"name"`
	OrganizationID types.String                    `tfsdk:"organization_id"`
	Rules          []JourneyCreationRequestRules   `tfsdk:"rules"`
	Settings       *JourneyCreationRequestSettings `tfsdk:"settings"`
	Steps          []JourneyCreationRequestSteps   `tfsdk:"steps"`
}

func (r *JourneyResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_journey"
}

func (r *JourneyResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Journey Resource",

		Attributes: map[string]schema.Attribute{
			"brand_id": schema.StringAttribute{
				Required: true,
			},
			"created_by": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"design": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"logo_url": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"theme": schema.MapAttribute{
						Required:    true,
						ElementType: types.StringType,
						Validators: []validator.Map{
							mapvalidator.ValueStringsAre(validators.IsValidJSON()),
						},
					},
				},
			},
			"journey_id": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"logics": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"actions": schema.ListAttribute{
							Required:    true,
							ElementType: types.StringType,
						},
						"auto_generated_id": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
						"conditions": schema.ListAttribute{
							Required:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"organization_id": schema.StringAttribute{
				Required: true,
			},
			"rules": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"source": schema.StringAttribute{
							Required: true,
						},
						"source_type": schema.StringAttribute{
							Required: true,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"journey",
									"step",
									"block",
								),
							},
						},
						"target": schema.StringAttribute{
							Required: true,
						},
						"type": schema.StringAttribute{
							Required: true,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"inject",
									"injectWithKey",
								),
							},
						},
					},
				},
			},
			"settings": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"design_id": schema.StringAttribute{
						Required: true,
					},
					"embed_options": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"button": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"align": schema.StringAttribute{
										Computed: true,
										Optional: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"left",
												"center",
												"right",
											),
										},
									},
									"text": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
								},
							},
							"lang": schema.StringAttribute{
								Computed: true,
								Optional: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"de",
										"en",
										"fr",
									),
								},
							},
							"mode": schema.StringAttribute{
								Computed: true,
								Optional: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"full-screen",
										"inline",
									),
								},
							},
							"scroll_to_top": schema.BoolAttribute{
								Computed: true,
								Optional: true,
							},
							"top_bar": schema.BoolAttribute{
								Computed: true,
								Optional: true,
							},
							"width": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
						},
					},
					"entity_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"entity_tags": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"mappings_automation_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"organization_settings": schema.MapAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.BoolType,
					},
					"public_token": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"runtime_entities": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"safe_mode_automation": schema.BoolAttribute{
						Computed: true,
						Optional: true,
					},
					"targeted_customer": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"template_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
			},
			"steps": schema.ListNestedAttribute{
				Required: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"hide_next_button": schema.BoolAttribute{
							Computed: true,
							Optional: true,
						},
						"name": schema.StringAttribute{
							Required: true,
						},
						"schema": schema.StringAttribute{
							Required: true,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
							Description: `Parsed as JSON.`,
						},
						"show_step_name": schema.BoolAttribute{
							Computed: true,
							Optional: true,
						},
						"show_step_subtitle": schema.BoolAttribute{
							Computed: true,
							Optional: true,
						},
						"show_stepper": schema.BoolAttribute{
							Computed: true,
							Optional: true,
						},
						"show_stepper_labels": schema.BoolAttribute{
							Computed: true,
							Optional: true,
						},
						"step_id": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
						"sub_title": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
						"title": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
						"uischema": schema.StringAttribute{
							Required: true,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
							Description: `Parsed as JSON.`,
						},
					},
				},
			},
		},
	}
}

func (r *JourneyResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *JourneyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *JourneyResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request1 := data.ToSDKType()
	request := operations.CreateJourneyRequest{
		Request: request1,
	}
	res, err := r.client.Journeys.CreateJourney(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.JourneyResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSDKType(res.JourneyResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *JourneyResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *JourneyResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.JourneyID.ValueString()
	pathParams := operations.GetJourneyPathParams{
		ID: id,
	}
	orgID := new(string)
	if !data.OrganizationID.IsUnknown() && !data.OrganizationID.IsNull() {
		*orgID = data.OrganizationID.ValueString()
	} else {
		orgID = nil
	}
	queryParams := operations.GetJourneyQueryParams{
		OrgID: orgID,
	}
	request := operations.GetJourneyRequest{
		PathParams:  pathParams,
		QueryParams: queryParams,
	}
	res, err := r.client.Journeys.GetJourney(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.JourneyResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSDKType(res.JourneyResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *JourneyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *JourneyResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request1 := data.ToSDKType()
	request := operations.UpdateJourneyRequest{
		Request: request1,
	}
	res, err := r.client.Journeys.UpdateJourney(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.JourneyResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSDKType(res.JourneyResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *JourneyResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *JourneyResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.JourneyID.ValueString()
	pathParams := operations.RemoveJourneyPathParams{
		ID: id,
	}
	request := operations.RemoveJourneyRequest{
		PathParams: pathParams,
	}
	res, err := r.client.Journeys.RemoveJourney(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.RawResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}

}

func (r *JourneyResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
