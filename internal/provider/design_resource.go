// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-designbuilder/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-designbuilder/internal/sdk/pkg/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-designbuilder/internal/sdk/pkg/models/shared"
	"github.com/epilot-dev/terraform-provider-epilot-designbuilder/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"time"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &DesignResource{}
var _ resource.ResourceWithImportState = &DesignResource{}

func NewDesignResource() resource.Resource {
	return &DesignResource{}
}

// DesignResource defines the resource implementation.
type DesignResource struct {
	client *sdk.SDK
}

// DesignResourceModel describes the resource data model.
type DesignResourceModel struct {
	Background        types.String        `tfsdk:"background"`
	BrandID           types.String        `tfsdk:"brand_id"`
	BrandName         types.String        `tfsdk:"brand_name"`
	CreatedAt         types.String        `tfsdk:"created_at"`
	CreatedBy         types.String        `tfsdk:"created_by"`
	CustomerPortals   []types.String      `tfsdk:"customer_portals"`
	CustomTheme       types.String        `tfsdk:"custom_theme"`
	Design            *AddDesignResDesign `tfsdk:"design"`
	DisplayName       types.String        `tfsdk:"display_name"`
	Edited            types.Bool          `tfsdk:"edited"`
	Emailaddress      types.String        `tfsdk:"emailaddress"`
	Error             types.String        `tfsdk:"error"`
	FileType          types.String        `tfsdk:"file_type"`
	FontFamily        types.String        `tfsdk:"font_family"`
	FontID            types.String        `tfsdk:"font_id"`
	FontName          types.String        `tfsdk:"font_name"`
	FontWeightBold    types.String        `tfsdk:"font_weight_bold"`
	FontWeightMedium  types.String        `tfsdk:"font_weight_medium"`
	FontWeightRegular types.String        `tfsdk:"font_weight_regular"`
	Fullname          types.String        `tfsdk:"fullname"`
	ID                types.String        `tfsdk:"id"`
	LastModifiedAt    types.String        `tfsdk:"last_modified_at"`
	Name              types.String        `tfsdk:"name"`
	Navbar            types.String        `tfsdk:"navbar"`
	Paper             types.String        `tfsdk:"paper"`
	Primary           types.String        `tfsdk:"primary"`
	S3ObjectKey       types.String        `tfsdk:"s3_object_key"`
	Secondary         types.String        `tfsdk:"secondary"`
	StyleName         types.String        `tfsdk:"style_name"`
	URL               types.String        `tfsdk:"url"`
	Urls              []types.String      `tfsdk:"urls"`
	UseCustomTheme    types.Bool          `tfsdk:"use_custom_theme"`
	Userid            types.String        `tfsdk:"userid"`
	Widgets           []types.String      `tfsdk:"widgets"`
}

func (r *DesignResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_design"
}

func (r *DesignResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Design Resource",

		Attributes: map[string]schema.Attribute{
			"background": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"brand_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"brand_name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"created_at": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Creation date and time using ISO 8601 full-time format. Requires replacement if changed. `,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"created_by": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"customer_portals": schema.ListAttribute{
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				ElementType: types.StringType,
				Description: `Requires replacement if changed. `,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"custom_theme": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"design": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"brand_id": schema.StringAttribute{
						Computed: true,
					},
					"brand_name": schema.StringAttribute{
						Computed: true,
					},
					"created_at": schema.StringAttribute{
						Computed:    true,
						Description: `Creation date and time using ISO 8601 full-time format`,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"created_by": schema.StringAttribute{
						Computed: true,
					},
					"custom_theme": schema.StringAttribute{
						Computed: true,
					},
					"edited": schema.BoolAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"last_modified_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"style": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"consumer": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"customer_portals": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
										Validators: []validator.List{
											listvalidator.ValueStringsAre(validators.IsValidJSON()),
										},
									},
									"widgets": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
										Validators: []validator.List{
											listvalidator.ValueStringsAre(validators.IsValidJSON()),
										},
									},
								},
							},
							"logo": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"main": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"display_name": schema.StringAttribute{
												Computed: true,
											},
											"file_type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["LOGO", "FONT"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"LOGO",
														"FONT",
													),
												},
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"s3_object_key": schema.StringAttribute{
												Computed: true,
											},
											"url": schema.StringAttribute{
												Computed: true,
											},
										},
									},
								},
							},
							"palette": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"background": schema.StringAttribute{
										Computed: true,
									},
									"error": schema.StringAttribute{
										Computed: true,
									},
									"navbar": schema.StringAttribute{
										Computed: true,
									},
									"paper": schema.StringAttribute{
										Computed: true,
									},
									"primary": schema.StringAttribute{
										Computed: true,
									},
									"secondary": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"typography": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"font": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"font_family": schema.StringAttribute{
												Computed: true,
											},
											"font_id": schema.StringAttribute{
												Computed: true,
											},
											"font_name": schema.StringAttribute{
												Computed: true,
											},
											"font_weight_bold": schema.StringAttribute{
												Computed: true,
											},
											"font_weight_medium": schema.StringAttribute{
												Computed: true,
											},
											"font_weight_regular": schema.StringAttribute{
												Computed: true,
											},
											"urls": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Validators: []validator.List{
													listvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
										},
									},
									"primary": schema.StringAttribute{
										Computed: true,
									},
									"secondary": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
					},
					"style_name": schema.StringAttribute{
						Computed: true,
					},
					"use_custom_theme": schema.BoolAttribute{
						Computed: true,
					},
					"user": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"emailaddress": schema.StringAttribute{
								Computed: true,
							},
							"fullname": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"userid": schema.StringAttribute{
								Computed: true,
							},
						},
					},
				},
			},
			"display_name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"edited": schema.BoolAttribute{
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"emailaddress": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"error": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"file_type": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. ; must be one of ["LOGO", "FONT"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"LOGO",
						"FONT",
					),
				},
			},
			"font_family": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"font_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"font_name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"font_weight_bold": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"font_weight_medium": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"font_weight_regular": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"fullname": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"id": schema.StringAttribute{
				Optional:    true,
				Description: `Id of the design`,
			},
			"last_modified_at": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"navbar": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"paper": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"primary": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"s3_object_key": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"secondary": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"style_name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"url": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"urls": schema.ListAttribute{
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				ElementType: types.StringType,
				Description: `Requires replacement if changed. `,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"use_custom_theme": schema.BoolAttribute{
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"userid": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"widgets": schema.ListAttribute{
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				ElementType: types.StringType,
				Description: `Requires replacement if changed. `,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
		},
	}
}

func (r *DesignResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *DesignResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *DesignResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	brandID := new(string)
	if !data.BrandID.IsUnknown() && !data.BrandID.IsNull() {
		*brandID = data.BrandID.ValueString()
	} else {
		brandID = nil
	}
	brandName := new(string)
	if !data.BrandName.IsUnknown() && !data.BrandName.IsNull() {
		*brandName = data.BrandName.ValueString()
	} else {
		brandName = nil
	}
	createdAt := new(time.Time)
	if !data.CreatedAt.IsUnknown() && !data.CreatedAt.IsNull() {
		*createdAt, _ = time.Parse(time.RFC3339Nano, data.CreatedAt.ValueString())
	} else {
		createdAt = nil
	}
	createdBy := new(string)
	if !data.CreatedBy.IsUnknown() && !data.CreatedBy.IsNull() {
		*createdBy = data.CreatedBy.ValueString()
	} else {
		createdBy = nil
	}
	customTheme := new(string)
	if !data.CustomTheme.IsUnknown() && !data.CustomTheme.IsNull() {
		*customTheme = data.CustomTheme.ValueString()
	} else {
		customTheme = nil
	}
	edited := data.Edited.ValueBool()
	id := new(string)
	if !data.ID.IsUnknown() && !data.ID.IsNull() {
		*id = data.ID.ValueString()
	} else {
		id = nil
	}
	lastModifiedAt := new(time.Time)
	if !data.LastModifiedAt.IsUnknown() && !data.LastModifiedAt.IsNull() {
		*lastModifiedAt, _ = time.Parse(time.RFC3339Nano, data.LastModifiedAt.ValueString())
	} else {
		lastModifiedAt = nil
	}
	var customerPortals []interface{} = nil
	for _, customerPortalsItem := range data.CustomerPortals {
		var customerPortalsTmp interface{}
		_ = json.Unmarshal([]byte(customerPortalsItem.ValueString()), &customerPortalsTmp)
		customerPortals = append(customerPortals, customerPortalsTmp)
	}
	var widgets []interface{} = nil
	for _, widgetsItem := range data.Widgets {
		var widgetsTmp interface{}
		_ = json.Unmarshal([]byte(widgetsItem.ValueString()), &widgetsTmp)
		widgets = append(widgets, widgetsTmp)
	}
	consumer := shared.ConsumerData{
		CustomerPortals: customerPortals,
		Widgets:         widgets,
	}
	var logo *shared.LogoData
	if data != nil {
		var main *shared.FileData
		if data != nil {
			displayName := new(string)
			if !data.DisplayName.IsUnknown() && !data.DisplayName.IsNull() {
				*displayName = data.DisplayName.ValueString()
			} else {
				displayName = nil
			}
			fileType := new(shared.FileType)
			if !data.FileType.IsUnknown() && !data.FileType.IsNull() {
				*fileType = shared.FileType(data.FileType.ValueString())
			} else {
				fileType = nil
			}
			name := data.Name.ValueString()
			s3ObjectKey := data.S3ObjectKey.ValueString()
			url := data.URL.ValueString()
			main = &shared.FileData{
				DisplayName: displayName,
				FileType:    fileType,
				Name:        name,
				S3ObjectKey: s3ObjectKey,
				URL:         url,
			}
		}
		logo = &shared.LogoData{
			Main: main,
		}
	}
	background := data.Background.ValueString()
	error := data.Error.ValueString()
	navbar := data.Navbar.ValueString()
	paper := data.Paper.ValueString()
	primary := data.Primary.ValueString()
	secondary := data.Secondary.ValueString()
	palette := shared.PaletteData{
		Background: background,
		Error:      error,
		Navbar:     navbar,
		Paper:      paper,
		Primary:    primary,
		Secondary:  secondary,
	}
	fontFamily := new(string)
	if !data.FontFamily.IsUnknown() && !data.FontFamily.IsNull() {
		*fontFamily = data.FontFamily.ValueString()
	} else {
		fontFamily = nil
	}
	fontID := data.FontID.ValueString()
	fontName := data.FontName.ValueString()
	fontWeightBold := new(string)
	if !data.FontWeightBold.IsUnknown() && !data.FontWeightBold.IsNull() {
		*fontWeightBold = data.FontWeightBold.ValueString()
	} else {
		fontWeightBold = nil
	}
	fontWeightMedium := new(string)
	if !data.FontWeightMedium.IsUnknown() && !data.FontWeightMedium.IsNull() {
		*fontWeightMedium = data.FontWeightMedium.ValueString()
	} else {
		fontWeightMedium = nil
	}
	fontWeightRegular := new(string)
	if !data.FontWeightRegular.IsUnknown() && !data.FontWeightRegular.IsNull() {
		*fontWeightRegular = data.FontWeightRegular.ValueString()
	} else {
		fontWeightRegular = nil
	}
	var urls []interface{} = nil
	for _, urlsItem := range data.Urls {
		var urlsTmp interface{}
		_ = json.Unmarshal([]byte(urlsItem.ValueString()), &urlsTmp)
		urls = append(urls, urlsTmp)
	}
	font := shared.FontData{
		FontFamily:        fontFamily,
		FontID:            fontID,
		FontName:          fontName,
		FontWeightBold:    fontWeightBold,
		FontWeightMedium:  fontWeightMedium,
		FontWeightRegular: fontWeightRegular,
		Urls:              urls,
	}
	primary1 := data.Primary.ValueString()
	secondary1 := data.Secondary.ValueString()
	typography := shared.TypographyData{
		Font:      font,
		Primary:   primary1,
		Secondary: secondary1,
	}
	style := shared.Style{
		Consumer:   consumer,
		Logo:       logo,
		Palette:    palette,
		Typography: typography,
	}
	styleName := data.StyleName.ValueString()
	useCustomTheme := new(bool)
	if !data.UseCustomTheme.IsUnknown() && !data.UseCustomTheme.IsNull() {
		*useCustomTheme = data.UseCustomTheme.ValueBool()
	} else {
		useCustomTheme = nil
	}
	var user *shared.User
	if data != nil {
		emailaddress := new(string)
		if !data.Emailaddress.IsUnknown() && !data.Emailaddress.IsNull() {
			*emailaddress = data.Emailaddress.ValueString()
		} else {
			emailaddress = nil
		}
		fullname := new(string)
		if !data.Fullname.IsUnknown() && !data.Fullname.IsNull() {
			*fullname = data.Fullname.ValueString()
		} else {
			fullname = nil
		}
		name1 := new(string)
		if !data.Name.IsUnknown() && !data.Name.IsNull() {
			*name1 = data.Name.ValueString()
		} else {
			name1 = nil
		}
		userid := new(string)
		if !data.Userid.IsUnknown() && !data.Userid.IsNull() {
			*userid = data.Userid.ValueString()
		} else {
			userid = nil
		}
		user = &shared.User{
			Emailaddress: emailaddress,
			Fullname:     fullname,
			Name:         name1,
			Userid:       userid,
		}
	}
	design := shared.Design{
		BrandID:        brandID,
		BrandName:      brandName,
		CreatedAt:      createdAt,
		CreatedBy:      createdBy,
		CustomTheme:    customTheme,
		Edited:         edited,
		ID:             id,
		LastModifiedAt: lastModifiedAt,
		Style:          style,
		StyleName:      styleName,
		UseCustomTheme: useCustomTheme,
		User:           user,
	}
	request := shared.AddDesignReq{
		Design: design,
	}
	res, err := r.client.AddDesign(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.AddDesignRes == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedAddDesignRes(res.AddDesignRes)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	designID := data.ID.ValueString()
	request1 := operations.GetDesignRequest{
		DesignID: designID,
	}
	res1, err := r.client.GetDesign(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if res1.GetDesignRes == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedGetDesignRes(res1.GetDesignRes)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DesignResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *DesignResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	designID := data.ID.ValueString()
	request := operations.GetDesignRequest{
		DesignID: designID,
	}
	res, err := r.client.GetDesign(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.GetDesignRes == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedGetDesignRes(res.GetDesignRes)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DesignResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *DesignResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	updateDesignReq := *data.ToSharedUpdateDesignReq()
	designID := data.ID.ValueString()
	request := operations.UpdateDesignRequest{
		UpdateDesignReq: updateDesignReq,
		DesignID:        designID,
	}
	res, err := r.client.UpdateDesign(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DesignResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *DesignResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	designID := data.ID.ValueString()
	request := operations.DeleteDesignRequest{
		DesignID: designID,
	}
	res, err := r.client.DeleteDesign(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *DesignResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
