// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-designbuilder/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-designbuilder/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-designbuilder/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-designbuilder/internal/sdk/models/shared"
	"github.com/epilot-dev/terraform-provider-epilot-designbuilder/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &DesignResource{}
var _ resource.ResourceWithImportState = &DesignResource{}

func NewDesignResource() resource.Resource {
	return &DesignResource{}
}

// DesignResource defines the resource implementation.
type DesignResource struct {
	client *sdk.SDK
}

// DesignResourceModel describes the resource data model.
type DesignResourceModel struct {
	BrandID        types.String  `tfsdk:"brand_id"`
	BrandName      types.String  `tfsdk:"brand_name"`
	Cashback       types.String  `tfsdk:"cashback"`
	Coupon         types.String  `tfsdk:"coupon"`
	CreatedAt      types.String  `tfsdk:"created_at"`
	CreatedBy      types.String  `tfsdk:"created_by"`
	CustomCSS      types.String  `tfsdk:"custom_css"`
	CustomTheme    types.String  `tfsdk:"custom_theme"`
	Edited         types.Bool    `tfsdk:"edited"`
	ID             types.String  `tfsdk:"id"`
	IsDefault      types.Bool    `tfsdk:"is_default"`
	LastModifiedAt types.String  `tfsdk:"last_modified_at"`
	Style          types.String  `tfsdk:"style"`
	StyleName      types.String  `tfsdk:"style_name"`
	UseCustomTheme types.Bool    `tfsdk:"use_custom_theme"`
	User           *tfTypes.User `tfsdk:"user"`
}

func (r *DesignResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_design"
}

func (r *DesignResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Design Resource",
		Attributes: map[string]schema.Attribute{
			"brand_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Parsed as JSON.`,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
			},
			"brand_name": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"cashback": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"coupon": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `Creation date and time using ISO 8601 full-time format`,
			},
			"created_by": schema.StringAttribute{
				Computed: true,
			},
			"custom_css": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"custom_theme": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"edited": schema.BoolAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"is_default": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"last_modified_at": schema.StringAttribute{
				Computed: true,
			},
			"style": schema.StringAttribute{
				Required:    true,
				Description: `Parsed as JSON.`,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
			},
			"style_name": schema.StringAttribute{
				Required: true,
			},
			"use_custom_theme": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"user": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"emailaddress": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"fullname": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"userid": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
			},
		},
	}
}

func (r *DesignResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *DesignResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *DesignResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	design := *data.ToSharedDesign()
	request := shared.AddDesignReq{
		Design: design,
	}
	res, err := r.client.DesignBuilder.AddDesign(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.AddDesignRes != nil && res.AddDesignRes.Design != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedAddDesignResDesign(res.AddDesignRes.Design)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DesignResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *DesignResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var designID string
	designID = data.ID.ValueString()

	request := operations.GetDesignRequest{
		DesignID: designID,
	}
	res, err := r.client.DesignBuilder.GetDesign(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.GetDesignRes != nil && res.GetDesignRes.Design != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedGetDesignResDesign(res.GetDesignRes.Design)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DesignResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *DesignResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	design := *data.ToSharedUpdateDesignReqDesign()
	updateDesignReq := shared.UpdateDesignReq{
		Design: design,
	}
	var designID string
	designID = data.ID.ValueString()

	request := operations.UpdateDesignRequest{
		UpdateDesignReq: updateDesignReq,
		DesignID:        designID,
	}
	res, err := r.client.DesignBuilder.UpdateDesign(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DesignResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *DesignResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var designID string
	designID = data.ID.ValueString()

	request := operations.DeleteDesignRequest{
		DesignID: designID,
	}
	res, err := r.client.DesignBuilder.DeleteDesign(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *DesignResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
