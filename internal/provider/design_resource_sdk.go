// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-designbuilder/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-designbuilder/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DesignResourceModel) ToSharedDesign() *shared.Design {
	var brandID interface{}
	if !r.BrandID.IsUnknown() && !r.BrandID.IsNull() {
		_ = json.Unmarshal([]byte(r.BrandID.ValueString()), &brandID)
	}
	brandName := new(string)
	if !r.BrandName.IsUnknown() && !r.BrandName.IsNull() {
		*brandName = r.BrandName.ValueString()
	} else {
		brandName = nil
	}
	cashback := new(string)
	if !r.Cashback.IsUnknown() && !r.Cashback.IsNull() {
		*cashback = r.Cashback.ValueString()
	} else {
		cashback = nil
	}
	coupon := new(string)
	if !r.Coupon.IsUnknown() && !r.Coupon.IsNull() {
		*coupon = r.Coupon.ValueString()
	} else {
		coupon = nil
	}
	customCSS := new(string)
	if !r.CustomCSS.IsUnknown() && !r.CustomCSS.IsNull() {
		*customCSS = r.CustomCSS.ValueString()
	} else {
		customCSS = nil
	}
	customTheme := new(string)
	if !r.CustomTheme.IsUnknown() && !r.CustomTheme.IsNull() {
		*customTheme = r.CustomTheme.ValueString()
	} else {
		customTheme = nil
	}
	isDefault := new(bool)
	if !r.IsDefault.IsUnknown() && !r.IsDefault.IsNull() {
		*isDefault = r.IsDefault.ValueBool()
	} else {
		isDefault = nil
	}
	var style interface{}
	_ = json.Unmarshal([]byte(r.Style.ValueString()), &style)
	var styleName string
	styleName = r.StyleName.ValueString()

	useCustomTheme := new(bool)
	if !r.UseCustomTheme.IsUnknown() && !r.UseCustomTheme.IsNull() {
		*useCustomTheme = r.UseCustomTheme.ValueBool()
	} else {
		useCustomTheme = nil
	}
	var user *shared.User
	if r.User != nil {
		emailaddress := new(string)
		if !r.User.Emailaddress.IsUnknown() && !r.User.Emailaddress.IsNull() {
			*emailaddress = r.User.Emailaddress.ValueString()
		} else {
			emailaddress = nil
		}
		fullname := new(string)
		if !r.User.Fullname.IsUnknown() && !r.User.Fullname.IsNull() {
			*fullname = r.User.Fullname.ValueString()
		} else {
			fullname = nil
		}
		name := new(string)
		if !r.User.Name.IsUnknown() && !r.User.Name.IsNull() {
			*name = r.User.Name.ValueString()
		} else {
			name = nil
		}
		userid := new(string)
		if !r.User.Userid.IsUnknown() && !r.User.Userid.IsNull() {
			*userid = r.User.Userid.ValueString()
		} else {
			userid = nil
		}
		user = &shared.User{
			Emailaddress: emailaddress,
			Fullname:     fullname,
			Name:         name,
			Userid:       userid,
		}
	}
	out := shared.Design{
		BrandID:        brandID,
		BrandName:      brandName,
		Cashback:       cashback,
		Coupon:         coupon,
		CustomCSS:      customCSS,
		CustomTheme:    customTheme,
		IsDefault:      isDefault,
		Style:          style,
		StyleName:      styleName,
		UseCustomTheme: useCustomTheme,
		User:           user,
	}
	return &out
}

func (r *DesignResourceModel) RefreshFromSharedAddDesignResDesign(resp *shared.AddDesignResDesign) {
	if resp != nil {
		if resp.BrandID == nil {
			r.BrandID = types.StringNull()
		} else {
			brandIDResult, _ := json.Marshal(resp.BrandID)
			r.BrandID = types.StringValue(string(brandIDResult))
		}
		r.BrandName = types.StringPointerValue(resp.BrandName)
		r.Cashback = types.StringPointerValue(resp.Cashback)
		r.Coupon = types.StringPointerValue(resp.Coupon)
		r.CreatedAt = types.StringPointerValue(resp.CreatedAt)
		r.CreatedBy = types.StringPointerValue(resp.CreatedBy)
		r.CustomCSS = types.StringPointerValue(resp.CustomCSS)
		r.CustomTheme = types.StringPointerValue(resp.CustomTheme)
		r.Edited = types.BoolValue(resp.Edited)
		r.ID = types.StringPointerValue(resp.ID)
		r.IsDefault = types.BoolPointerValue(resp.IsDefault)
		r.LastModifiedAt = types.StringPointerValue(resp.LastModifiedAt)
		styleResult, _ := json.Marshal(resp.Style)
		r.Style = types.StringValue(string(styleResult))
		r.StyleName = types.StringValue(resp.StyleName)
		r.UseCustomTheme = types.BoolPointerValue(resp.UseCustomTheme)
		if resp.User == nil {
			r.User = nil
		} else {
			r.User = &tfTypes.User{}
			r.User.Emailaddress = types.StringPointerValue(resp.User.Emailaddress)
			r.User.Fullname = types.StringPointerValue(resp.User.Fullname)
			r.User.Name = types.StringPointerValue(resp.User.Name)
			r.User.Userid = types.StringPointerValue(resp.User.Userid)
		}
	}
}

func (r *DesignResourceModel) RefreshFromSharedGetDesignResDesign(resp *shared.GetDesignResDesign) {
	if resp != nil {
		if resp.BrandID == nil {
			r.BrandID = types.StringNull()
		} else {
			brandIDResult, _ := json.Marshal(resp.BrandID)
			r.BrandID = types.StringValue(string(brandIDResult))
		}
		r.BrandName = types.StringPointerValue(resp.BrandName)
		r.Cashback = types.StringPointerValue(resp.Cashback)
		r.Coupon = types.StringPointerValue(resp.Coupon)
		r.CreatedAt = types.StringPointerValue(resp.CreatedAt)
		r.CreatedBy = types.StringPointerValue(resp.CreatedBy)
		r.CustomCSS = types.StringPointerValue(resp.CustomCSS)
		r.CustomTheme = types.StringPointerValue(resp.CustomTheme)
		r.Edited = types.BoolValue(resp.Edited)
		r.ID = types.StringPointerValue(resp.ID)
		r.IsDefault = types.BoolPointerValue(resp.IsDefault)
		r.LastModifiedAt = types.StringPointerValue(resp.LastModifiedAt)
		styleResult, _ := json.Marshal(resp.Style)
		r.Style = types.StringValue(string(styleResult))
		r.StyleName = types.StringValue(resp.StyleName)
		r.UseCustomTheme = types.BoolPointerValue(resp.UseCustomTheme)
		if resp.User == nil {
			r.User = nil
		} else {
			r.User = &tfTypes.User{}
			r.User.Emailaddress = types.StringPointerValue(resp.User.Emailaddress)
			r.User.Fullname = types.StringPointerValue(resp.User.Fullname)
			r.User.Name = types.StringPointerValue(resp.User.Name)
			r.User.Userid = types.StringPointerValue(resp.User.Userid)
		}
	}
}

func (r *DesignResourceModel) ToSharedUpdateDesignReqDesign() *shared.UpdateDesignReqDesign {
	var brandID interface{}
	if !r.BrandID.IsUnknown() && !r.BrandID.IsNull() {
		_ = json.Unmarshal([]byte(r.BrandID.ValueString()), &brandID)
	}
	brandName := new(string)
	if !r.BrandName.IsUnknown() && !r.BrandName.IsNull() {
		*brandName = r.BrandName.ValueString()
	} else {
		brandName = nil
	}
	cashback := new(string)
	if !r.Cashback.IsUnknown() && !r.Cashback.IsNull() {
		*cashback = r.Cashback.ValueString()
	} else {
		cashback = nil
	}
	coupon := new(string)
	if !r.Coupon.IsUnknown() && !r.Coupon.IsNull() {
		*coupon = r.Coupon.ValueString()
	} else {
		coupon = nil
	}
	customCSS := new(string)
	if !r.CustomCSS.IsUnknown() && !r.CustomCSS.IsNull() {
		*customCSS = r.CustomCSS.ValueString()
	} else {
		customCSS = nil
	}
	customTheme := new(string)
	if !r.CustomTheme.IsUnknown() && !r.CustomTheme.IsNull() {
		*customTheme = r.CustomTheme.ValueString()
	} else {
		customTheme = nil
	}
	isDefault := new(bool)
	if !r.IsDefault.IsUnknown() && !r.IsDefault.IsNull() {
		*isDefault = r.IsDefault.ValueBool()
	} else {
		isDefault = nil
	}
	var style interface{}
	_ = json.Unmarshal([]byte(r.Style.ValueString()), &style)
	var styleName string
	styleName = r.StyleName.ValueString()

	useCustomTheme := new(bool)
	if !r.UseCustomTheme.IsUnknown() && !r.UseCustomTheme.IsNull() {
		*useCustomTheme = r.UseCustomTheme.ValueBool()
	} else {
		useCustomTheme = nil
	}
	var user *shared.UpdateDesignReqUser
	if r.User != nil {
		emailaddress := new(string)
		if !r.User.Emailaddress.IsUnknown() && !r.User.Emailaddress.IsNull() {
			*emailaddress = r.User.Emailaddress.ValueString()
		} else {
			emailaddress = nil
		}
		fullname := new(string)
		if !r.User.Fullname.IsUnknown() && !r.User.Fullname.IsNull() {
			*fullname = r.User.Fullname.ValueString()
		} else {
			fullname = nil
		}
		name := new(string)
		if !r.User.Name.IsUnknown() && !r.User.Name.IsNull() {
			*name = r.User.Name.ValueString()
		} else {
			name = nil
		}
		userid := new(string)
		if !r.User.Userid.IsUnknown() && !r.User.Userid.IsNull() {
			*userid = r.User.Userid.ValueString()
		} else {
			userid = nil
		}
		user = &shared.UpdateDesignReqUser{
			Emailaddress: emailaddress,
			Fullname:     fullname,
			Name:         name,
			Userid:       userid,
		}
	}
	out := shared.UpdateDesignReqDesign{
		BrandID:        brandID,
		BrandName:      brandName,
		Cashback:       cashback,
		Coupon:         coupon,
		CustomCSS:      customCSS,
		CustomTheme:    customTheme,
		IsDefault:      isDefault,
		Style:          style,
		StyleName:      styleName,
		UseCustomTheme: useCustomTheme,
		User:           user,
	}
	return &out
}
