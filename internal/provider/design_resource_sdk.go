// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-designbuilder/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
)

func (r *DesignResourceModel) ToSharedDesign() *shared.Design {
	var brandID *shared.BrandID
	if r.BrandID != nil {
		str := new(string)
		if !r.BrandID.Str.IsUnknown() && !r.BrandID.Str.IsNull() {
			*str = r.BrandID.Str.ValueString()
		} else {
			str = nil
		}
		if str != nil {
			brandID = &shared.BrandID{
				Str: str,
			}
		}
		number := new(float64)
		if !r.BrandID.Number.IsUnknown() && !r.BrandID.Number.IsNull() {
			*number, _ = r.BrandID.Number.ValueBigFloat().Float64()
		} else {
			number = nil
		}
		if number != nil {
			brandID = &shared.BrandID{
				Number: number,
			}
		}
	}
	brandName := new(string)
	if !r.BrandName.IsUnknown() && !r.BrandName.IsNull() {
		*brandName = r.BrandName.ValueString()
	} else {
		brandName = nil
	}
	createdAt := new(string)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueString()
	} else {
		createdAt = nil
	}
	createdBy := new(string)
	if !r.CreatedBy.IsUnknown() && !r.CreatedBy.IsNull() {
		*createdBy = r.CreatedBy.ValueString()
	} else {
		createdBy = nil
	}
	var customTheme *shared.CustomTheme
	if r.CustomTheme != nil {
		customTheme = &shared.CustomTheme{}
	}
	edited := r.Edited.ValueBool()
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	lastModifiedAt := new(string)
	if !r.LastModifiedAt.IsUnknown() && !r.LastModifiedAt.IsNull() {
		*lastModifiedAt = r.LastModifiedAt.ValueString()
	} else {
		lastModifiedAt = nil
	}
	var customerPortals []shared.CustomerPortals = nil
	for _, customerPortalsItem := range r.Style.Consumer.CustomerPortals {
		if customerPortalsItem.WidgetPortalData != nil {
			id1 := customerPortalsItem.WidgetPortalData.ID.ValueString()
			name := customerPortalsItem.WidgetPortalData.Name.ValueString()
			widgetPortalData := shared.WidgetPortalData{
				ID:   id1,
				Name: name,
			}
			customerPortals = append(customerPortals, shared.CustomerPortals{
				WidgetPortalData: &widgetPortalData,
			})
		}
	}
	var widgets []interface{} = nil
	for _, widgetsItem := range r.Style.Consumer.Widgets {
		var widgetsTmp interface{}
		_ = json.Unmarshal([]byte(widgetsItem.ValueString()), &widgetsTmp)
		widgets = append(widgets, widgetsTmp)
	}
	consumer := shared.ConsumerData{
		CustomerPortals: customerPortals,
		Widgets:         widgets,
	}
	var logo *shared.LogoData
	if r.Style.Logo != nil {
		var main *shared.FileData
		if r.Style.Logo.Main != nil {
			displayName := new(string)
			if !r.Style.Logo.Main.DisplayName.IsUnknown() && !r.Style.Logo.Main.DisplayName.IsNull() {
				*displayName = r.Style.Logo.Main.DisplayName.ValueString()
			} else {
				displayName = nil
			}
			fileType := new(shared.FileType)
			if !r.Style.Logo.Main.FileType.IsUnknown() && !r.Style.Logo.Main.FileType.IsNull() {
				*fileType = shared.FileType(r.Style.Logo.Main.FileType.ValueString())
			} else {
				fileType = nil
			}
			name1 := r.Style.Logo.Main.Name.ValueString()
			s3ObjectKey := r.Style.Logo.Main.S3ObjectKey.ValueString()
			url := r.Style.Logo.Main.URL.ValueString()
			main = &shared.FileData{
				DisplayName: displayName,
				FileType:    fileType,
				Name:        name1,
				S3ObjectKey: s3ObjectKey,
				URL:         url,
			}
		}
		logo = &shared.LogoData{
			Main: main,
		}
	}
	background := r.Style.Palette.Background.ValueString()
	error := r.Style.Palette.Error.ValueString()
	navbar := r.Style.Palette.Navbar.ValueString()
	paper := r.Style.Palette.Paper.ValueString()
	primary := r.Style.Palette.Primary.ValueString()
	secondary := r.Style.Palette.Secondary.ValueString()
	palette := shared.PaletteData{
		Background: background,
		Error:      error,
		Navbar:     navbar,
		Paper:      paper,
		Primary:    primary,
		Secondary:  secondary,
	}
	fontFamily := new(string)
	if !r.Style.Typography.Font.FontFamily.IsUnknown() && !r.Style.Typography.Font.FontFamily.IsNull() {
		*fontFamily = r.Style.Typography.Font.FontFamily.ValueString()
	} else {
		fontFamily = nil
	}
	fontID := r.Style.Typography.Font.FontID.ValueString()
	fontName := r.Style.Typography.Font.FontName.ValueString()
	fontWeightBold := new(string)
	if !r.Style.Typography.Font.FontWeightBold.IsUnknown() && !r.Style.Typography.Font.FontWeightBold.IsNull() {
		*fontWeightBold = r.Style.Typography.Font.FontWeightBold.ValueString()
	} else {
		fontWeightBold = nil
	}
	fontWeightMedium := new(string)
	if !r.Style.Typography.Font.FontWeightMedium.IsUnknown() && !r.Style.Typography.Font.FontWeightMedium.IsNull() {
		*fontWeightMedium = r.Style.Typography.Font.FontWeightMedium.ValueString()
	} else {
		fontWeightMedium = nil
	}
	fontWeightRegular := new(string)
	if !r.Style.Typography.Font.FontWeightRegular.IsUnknown() && !r.Style.Typography.Font.FontWeightRegular.IsNull() {
		*fontWeightRegular = r.Style.Typography.Font.FontWeightRegular.ValueString()
	} else {
		fontWeightRegular = nil
	}
	var urls []interface{} = nil
	for _, urlsItem := range r.Style.Typography.Font.Urls {
		var urlsTmp interface{}
		_ = json.Unmarshal([]byte(urlsItem.ValueString()), &urlsTmp)
		urls = append(urls, urlsTmp)
	}
	font := shared.FontData{
		FontFamily:        fontFamily,
		FontID:            fontID,
		FontName:          fontName,
		FontWeightBold:    fontWeightBold,
		FontWeightMedium:  fontWeightMedium,
		FontWeightRegular: fontWeightRegular,
		Urls:              urls,
	}
	primary1 := r.Style.Typography.Primary.ValueString()
	secondary1 := r.Style.Typography.Secondary.ValueString()
	typography := shared.TypographyData{
		Font:      font,
		Primary:   primary1,
		Secondary: secondary1,
	}
	style := shared.Style{
		Consumer:   consumer,
		Logo:       logo,
		Palette:    palette,
		Typography: typography,
	}
	styleName := r.StyleName.ValueString()
	useCustomTheme := new(bool)
	if !r.UseCustomTheme.IsUnknown() && !r.UseCustomTheme.IsNull() {
		*useCustomTheme = r.UseCustomTheme.ValueBool()
	} else {
		useCustomTheme = nil
	}
	var user *shared.User
	if r.User != nil {
		emailaddress := new(string)
		if !r.User.Emailaddress.IsUnknown() && !r.User.Emailaddress.IsNull() {
			*emailaddress = r.User.Emailaddress.ValueString()
		} else {
			emailaddress = nil
		}
		fullname := new(string)
		if !r.User.Fullname.IsUnknown() && !r.User.Fullname.IsNull() {
			*fullname = r.User.Fullname.ValueString()
		} else {
			fullname = nil
		}
		name2 := new(string)
		if !r.User.Name.IsUnknown() && !r.User.Name.IsNull() {
			*name2 = r.User.Name.ValueString()
		} else {
			name2 = nil
		}
		userid := new(string)
		if !r.User.Userid.IsUnknown() && !r.User.Userid.IsNull() {
			*userid = r.User.Userid.ValueString()
		} else {
			userid = nil
		}
		user = &shared.User{
			Emailaddress: emailaddress,
			Fullname:     fullname,
			Name:         name2,
			Userid:       userid,
		}
	}
	out := shared.Design{
		BrandID:        brandID,
		BrandName:      brandName,
		CreatedAt:      createdAt,
		CreatedBy:      createdBy,
		CustomTheme:    customTheme,
		Edited:         edited,
		ID:             id,
		LastModifiedAt: lastModifiedAt,
		Style:          style,
		StyleName:      styleName,
		UseCustomTheme: useCustomTheme,
		User:           user,
	}
	return &out
}

func (r *DesignResourceModel) RefreshFromSharedAddDesignResDesign(resp *shared.AddDesignResDesign) {
	if resp.BrandID == nil {
		r.BrandID = nil
	} else {
		r.BrandID = &BrandID{}
		if resp.BrandID.Str != nil {
			r.BrandID.Str = types.StringPointerValue(resp.BrandID.Str)
		}
		if resp.BrandID.Number != nil {
			if resp.BrandID.Number != nil {
				r.BrandID.Number = types.NumberValue(big.NewFloat(float64(*resp.BrandID.Number)))
			} else {
				r.BrandID.Number = types.NumberNull()
			}
		}
	}
	r.BrandName = types.StringPointerValue(resp.BrandName)
	r.CreatedAt = types.StringPointerValue(resp.CreatedAt)
	r.CreatedBy = types.StringPointerValue(resp.CreatedBy)
	if resp.CustomTheme == nil {
		r.CustomTheme = nil
	} else {
		r.CustomTheme = &CustomTheme{}
	}
	r.Edited = types.BoolValue(resp.Edited)
	r.ID = types.StringPointerValue(resp.ID)
	r.LastModifiedAt = types.StringPointerValue(resp.LastModifiedAt)
	if len(r.Style.Consumer.CustomerPortals) > len(resp.Style.Consumer.CustomerPortals) {
		r.Style.Consumer.CustomerPortals = r.Style.Consumer.CustomerPortals[:len(resp.Style.Consumer.CustomerPortals)]
	}
	for customerPortalsCount, customerPortalsItem := range resp.Style.Consumer.CustomerPortals {
		var customerPortals1 CustomerPortals
		if customerPortalsItem.WidgetPortalData != nil {
			customerPortals1.WidgetPortalData = &WidgetPortalData{}
			customerPortals1.WidgetPortalData.ID = types.StringValue(customerPortalsItem.WidgetPortalData.ID)
			customerPortals1.WidgetPortalData.Name = types.StringValue(customerPortalsItem.WidgetPortalData.Name)
		}
		if customerPortalsCount+1 > len(r.Style.Consumer.CustomerPortals) {
			r.Style.Consumer.CustomerPortals = append(r.Style.Consumer.CustomerPortals, customerPortals1)
		} else {
		}
	}
	r.Style.Consumer.Widgets = nil
	for _, widgetsItem := range resp.Style.Consumer.Widgets {
		var widgets1 types.String
		widgets1Result, _ := json.Marshal(widgetsItem)
		widgets1 = types.StringValue(string(widgets1Result))
		r.Style.Consumer.Widgets = append(r.Style.Consumer.Widgets, widgets1)
	}
	if resp.Style.Logo == nil {
		r.Style.Logo = nil
	} else {
		r.Style.Logo = &LogoData{}
		if resp.Style.Logo.Main == nil {
			r.Style.Logo.Main = nil
		} else {
			r.Style.Logo.Main = &FileData{}
			r.Style.Logo.Main.DisplayName = types.StringPointerValue(resp.Style.Logo.Main.DisplayName)
			if resp.Style.Logo.Main.FileType != nil {
				r.Style.Logo.Main.FileType = types.StringValue(string(*resp.Style.Logo.Main.FileType))
			} else {
				r.Style.Logo.Main.FileType = types.StringNull()
			}
			r.Style.Logo.Main.Name = types.StringValue(resp.Style.Logo.Main.Name)
			r.Style.Logo.Main.S3ObjectKey = types.StringValue(resp.Style.Logo.Main.S3ObjectKey)
			r.Style.Logo.Main.URL = types.StringValue(resp.Style.Logo.Main.URL)
		}
	}
	r.Style.Palette.Background = types.StringValue(resp.Style.Palette.Background)
	r.Style.Palette.Error = types.StringValue(resp.Style.Palette.Error)
	r.Style.Palette.Navbar = types.StringValue(resp.Style.Palette.Navbar)
	r.Style.Palette.Paper = types.StringValue(resp.Style.Palette.Paper)
	r.Style.Palette.Primary = types.StringValue(resp.Style.Palette.Primary)
	r.Style.Palette.Secondary = types.StringValue(resp.Style.Palette.Secondary)
	r.Style.Typography.Font.FontFamily = types.StringPointerValue(resp.Style.Typography.Font.FontFamily)
	r.Style.Typography.Font.FontID = types.StringValue(resp.Style.Typography.Font.FontID)
	r.Style.Typography.Font.FontName = types.StringValue(resp.Style.Typography.Font.FontName)
	r.Style.Typography.Font.FontWeightBold = types.StringPointerValue(resp.Style.Typography.Font.FontWeightBold)
	r.Style.Typography.Font.FontWeightMedium = types.StringPointerValue(resp.Style.Typography.Font.FontWeightMedium)
	r.Style.Typography.Font.FontWeightRegular = types.StringPointerValue(resp.Style.Typography.Font.FontWeightRegular)
	r.Style.Typography.Font.Urls = nil
	for _, urlsItem := range resp.Style.Typography.Font.Urls {
		var urls1 types.String
		urls1Result, _ := json.Marshal(urlsItem)
		urls1 = types.StringValue(string(urls1Result))
		r.Style.Typography.Font.Urls = append(r.Style.Typography.Font.Urls, urls1)
	}
	r.Style.Typography.Primary = types.StringValue(resp.Style.Typography.Primary)
	r.Style.Typography.Secondary = types.StringValue(resp.Style.Typography.Secondary)
	r.StyleName = types.StringValue(resp.StyleName)
	r.UseCustomTheme = types.BoolPointerValue(resp.UseCustomTheme)
	if resp.User == nil {
		r.User = nil
	} else {
		r.User = &User{}
		r.User.Emailaddress = types.StringPointerValue(resp.User.Emailaddress)
		r.User.Fullname = types.StringPointerValue(resp.User.Fullname)
		r.User.Name = types.StringPointerValue(resp.User.Name)
		r.User.Userid = types.StringPointerValue(resp.User.Userid)
	}
}

func (r *DesignResourceModel) RefreshFromSharedGetDesignResDesign(resp *shared.GetDesignResDesign) {
	if resp.BrandID == nil {
		r.BrandID = nil
	} else {
		r.BrandID = &BrandID{}
		if resp.BrandID.Str != nil {
			r.BrandID.Str = types.StringPointerValue(resp.BrandID.Str)
		}
		if resp.BrandID.Number != nil {
			if resp.BrandID.Number != nil {
				r.BrandID.Number = types.NumberValue(big.NewFloat(float64(*resp.BrandID.Number)))
			} else {
				r.BrandID.Number = types.NumberNull()
			}
		}
	}
	r.BrandName = types.StringPointerValue(resp.BrandName)
	r.CreatedAt = types.StringPointerValue(resp.CreatedAt)
	r.CreatedBy = types.StringPointerValue(resp.CreatedBy)
	if resp.CustomTheme == nil {
		r.CustomTheme = nil
	} else {
		r.CustomTheme = &CustomTheme{}
	}
	r.Edited = types.BoolValue(resp.Edited)
	r.ID = types.StringPointerValue(resp.ID)
	r.LastModifiedAt = types.StringPointerValue(resp.LastModifiedAt)
	if len(r.Style.Consumer.CustomerPortals) > len(resp.Style.Consumer.CustomerPortals) {
		r.Style.Consumer.CustomerPortals = r.Style.Consumer.CustomerPortals[:len(resp.Style.Consumer.CustomerPortals)]
	}
	for customerPortalsCount, customerPortalsItem := range resp.Style.Consumer.CustomerPortals {
		var customerPortals1 CustomerPortals
		if customerPortalsItem.WidgetPortalData != nil {
			customerPortals1.WidgetPortalData = &WidgetPortalData{}
			customerPortals1.WidgetPortalData.ID = types.StringValue(customerPortalsItem.WidgetPortalData.ID)
			customerPortals1.WidgetPortalData.Name = types.StringValue(customerPortalsItem.WidgetPortalData.Name)
		}
		if customerPortalsCount+1 > len(r.Style.Consumer.CustomerPortals) {
			r.Style.Consumer.CustomerPortals = append(r.Style.Consumer.CustomerPortals, customerPortals1)
		} else {
		}
	}
	r.Style.Consumer.Widgets = nil
	for _, widgetsItem := range resp.Style.Consumer.Widgets {
		var widgets1 types.String
		widgets1Result, _ := json.Marshal(widgetsItem)
		widgets1 = types.StringValue(string(widgets1Result))
		r.Style.Consumer.Widgets = append(r.Style.Consumer.Widgets, widgets1)
	}
	if resp.Style.Logo == nil {
		r.Style.Logo = nil
	} else {
		r.Style.Logo = &LogoData{}
		if resp.Style.Logo.Main == nil {
			r.Style.Logo.Main = nil
		} else {
			r.Style.Logo.Main = &FileData{}
			r.Style.Logo.Main.DisplayName = types.StringPointerValue(resp.Style.Logo.Main.DisplayName)
			if resp.Style.Logo.Main.FileType != nil {
				r.Style.Logo.Main.FileType = types.StringValue(string(*resp.Style.Logo.Main.FileType))
			} else {
				r.Style.Logo.Main.FileType = types.StringNull()
			}
			r.Style.Logo.Main.Name = types.StringValue(resp.Style.Logo.Main.Name)
			r.Style.Logo.Main.S3ObjectKey = types.StringValue(resp.Style.Logo.Main.S3ObjectKey)
			r.Style.Logo.Main.URL = types.StringValue(resp.Style.Logo.Main.URL)
		}
	}
	r.Style.Palette.Background = types.StringValue(resp.Style.Palette.Background)
	r.Style.Palette.Error = types.StringValue(resp.Style.Palette.Error)
	r.Style.Palette.Navbar = types.StringValue(resp.Style.Palette.Navbar)
	r.Style.Palette.Paper = types.StringValue(resp.Style.Palette.Paper)
	r.Style.Palette.Primary = types.StringValue(resp.Style.Palette.Primary)
	r.Style.Palette.Secondary = types.StringValue(resp.Style.Palette.Secondary)
	r.Style.Typography.Font.FontFamily = types.StringPointerValue(resp.Style.Typography.Font.FontFamily)
	r.Style.Typography.Font.FontID = types.StringValue(resp.Style.Typography.Font.FontID)
	r.Style.Typography.Font.FontName = types.StringValue(resp.Style.Typography.Font.FontName)
	r.Style.Typography.Font.FontWeightBold = types.StringPointerValue(resp.Style.Typography.Font.FontWeightBold)
	r.Style.Typography.Font.FontWeightMedium = types.StringPointerValue(resp.Style.Typography.Font.FontWeightMedium)
	r.Style.Typography.Font.FontWeightRegular = types.StringPointerValue(resp.Style.Typography.Font.FontWeightRegular)
	r.Style.Typography.Font.Urls = nil
	for _, urlsItem := range resp.Style.Typography.Font.Urls {
		var urls1 types.String
		urls1Result, _ := json.Marshal(urlsItem)
		urls1 = types.StringValue(string(urls1Result))
		r.Style.Typography.Font.Urls = append(r.Style.Typography.Font.Urls, urls1)
	}
	r.Style.Typography.Primary = types.StringValue(resp.Style.Typography.Primary)
	r.Style.Typography.Secondary = types.StringValue(resp.Style.Typography.Secondary)
	r.StyleName = types.StringValue(resp.StyleName)
	r.UseCustomTheme = types.BoolPointerValue(resp.UseCustomTheme)
	if resp.User == nil {
		r.User = nil
	} else {
		r.User = &User{}
		r.User.Emailaddress = types.StringPointerValue(resp.User.Emailaddress)
		r.User.Fullname = types.StringPointerValue(resp.User.Fullname)
		r.User.Name = types.StringPointerValue(resp.User.Name)
		r.User.Userid = types.StringPointerValue(resp.User.Userid)
	}
}

func (r *DesignResourceModel) ToSharedUpdateDesignReqDesign() *shared.UpdateDesignReqDesign {
	var brandID *shared.UpdateDesignReqBrandID
	if r.BrandID != nil {
		str := new(string)
		if !r.BrandID.Str.IsUnknown() && !r.BrandID.Str.IsNull() {
			*str = r.BrandID.Str.ValueString()
		} else {
			str = nil
		}
		if str != nil {
			brandID = &shared.UpdateDesignReqBrandID{
				Str: str,
			}
		}
		number := new(float64)
		if !r.BrandID.Number.IsUnknown() && !r.BrandID.Number.IsNull() {
			*number, _ = r.BrandID.Number.ValueBigFloat().Float64()
		} else {
			number = nil
		}
		if number != nil {
			brandID = &shared.UpdateDesignReqBrandID{
				Number: number,
			}
		}
	}
	brandName := new(string)
	if !r.BrandName.IsUnknown() && !r.BrandName.IsNull() {
		*brandName = r.BrandName.ValueString()
	} else {
		brandName = nil
	}
	createdAt := new(string)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueString()
	} else {
		createdAt = nil
	}
	createdBy := new(string)
	if !r.CreatedBy.IsUnknown() && !r.CreatedBy.IsNull() {
		*createdBy = r.CreatedBy.ValueString()
	} else {
		createdBy = nil
	}
	var customTheme *shared.UpdateDesignReqCustomTheme
	if r.CustomTheme != nil {
		customTheme = &shared.UpdateDesignReqCustomTheme{}
	}
	edited := r.Edited.ValueBool()
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	lastModifiedAt := new(string)
	if !r.LastModifiedAt.IsUnknown() && !r.LastModifiedAt.IsNull() {
		*lastModifiedAt = r.LastModifiedAt.ValueString()
	} else {
		lastModifiedAt = nil
	}
	var customerPortals []shared.CustomerPortals = nil
	for _, customerPortalsItem := range r.Style.Consumer.CustomerPortals {
		if customerPortalsItem.WidgetPortalData != nil {
			id1 := customerPortalsItem.WidgetPortalData.ID.ValueString()
			name := customerPortalsItem.WidgetPortalData.Name.ValueString()
			widgetPortalData := shared.WidgetPortalData{
				ID:   id1,
				Name: name,
			}
			customerPortals = append(customerPortals, shared.CustomerPortals{
				WidgetPortalData: &widgetPortalData,
			})
		}
	}
	var widgets []interface{} = nil
	for _, widgetsItem := range r.Style.Consumer.Widgets {
		var widgetsTmp interface{}
		_ = json.Unmarshal([]byte(widgetsItem.ValueString()), &widgetsTmp)
		widgets = append(widgets, widgetsTmp)
	}
	consumer := shared.ConsumerData{
		CustomerPortals: customerPortals,
		Widgets:         widgets,
	}
	var logo *shared.LogoData
	if r.Style.Logo != nil {
		var main *shared.FileData
		if r.Style.Logo.Main != nil {
			displayName := new(string)
			if !r.Style.Logo.Main.DisplayName.IsUnknown() && !r.Style.Logo.Main.DisplayName.IsNull() {
				*displayName = r.Style.Logo.Main.DisplayName.ValueString()
			} else {
				displayName = nil
			}
			fileType := new(shared.FileType)
			if !r.Style.Logo.Main.FileType.IsUnknown() && !r.Style.Logo.Main.FileType.IsNull() {
				*fileType = shared.FileType(r.Style.Logo.Main.FileType.ValueString())
			} else {
				fileType = nil
			}
			name1 := r.Style.Logo.Main.Name.ValueString()
			s3ObjectKey := r.Style.Logo.Main.S3ObjectKey.ValueString()
			url := r.Style.Logo.Main.URL.ValueString()
			main = &shared.FileData{
				DisplayName: displayName,
				FileType:    fileType,
				Name:        name1,
				S3ObjectKey: s3ObjectKey,
				URL:         url,
			}
		}
		logo = &shared.LogoData{
			Main: main,
		}
	}
	background := r.Style.Palette.Background.ValueString()
	error := r.Style.Palette.Error.ValueString()
	navbar := r.Style.Palette.Navbar.ValueString()
	paper := r.Style.Palette.Paper.ValueString()
	primary := r.Style.Palette.Primary.ValueString()
	secondary := r.Style.Palette.Secondary.ValueString()
	palette := shared.PaletteData{
		Background: background,
		Error:      error,
		Navbar:     navbar,
		Paper:      paper,
		Primary:    primary,
		Secondary:  secondary,
	}
	fontFamily := new(string)
	if !r.Style.Typography.Font.FontFamily.IsUnknown() && !r.Style.Typography.Font.FontFamily.IsNull() {
		*fontFamily = r.Style.Typography.Font.FontFamily.ValueString()
	} else {
		fontFamily = nil
	}
	fontID := r.Style.Typography.Font.FontID.ValueString()
	fontName := r.Style.Typography.Font.FontName.ValueString()
	fontWeightBold := new(string)
	if !r.Style.Typography.Font.FontWeightBold.IsUnknown() && !r.Style.Typography.Font.FontWeightBold.IsNull() {
		*fontWeightBold = r.Style.Typography.Font.FontWeightBold.ValueString()
	} else {
		fontWeightBold = nil
	}
	fontWeightMedium := new(string)
	if !r.Style.Typography.Font.FontWeightMedium.IsUnknown() && !r.Style.Typography.Font.FontWeightMedium.IsNull() {
		*fontWeightMedium = r.Style.Typography.Font.FontWeightMedium.ValueString()
	} else {
		fontWeightMedium = nil
	}
	fontWeightRegular := new(string)
	if !r.Style.Typography.Font.FontWeightRegular.IsUnknown() && !r.Style.Typography.Font.FontWeightRegular.IsNull() {
		*fontWeightRegular = r.Style.Typography.Font.FontWeightRegular.ValueString()
	} else {
		fontWeightRegular = nil
	}
	var urls []interface{} = nil
	for _, urlsItem := range r.Style.Typography.Font.Urls {
		var urlsTmp interface{}
		_ = json.Unmarshal([]byte(urlsItem.ValueString()), &urlsTmp)
		urls = append(urls, urlsTmp)
	}
	font := shared.FontData{
		FontFamily:        fontFamily,
		FontID:            fontID,
		FontName:          fontName,
		FontWeightBold:    fontWeightBold,
		FontWeightMedium:  fontWeightMedium,
		FontWeightRegular: fontWeightRegular,
		Urls:              urls,
	}
	primary1 := r.Style.Typography.Primary.ValueString()
	secondary1 := r.Style.Typography.Secondary.ValueString()
	typography := shared.TypographyData{
		Font:      font,
		Primary:   primary1,
		Secondary: secondary1,
	}
	style := shared.UpdateDesignReqStyle{
		Consumer:   consumer,
		Logo:       logo,
		Palette:    palette,
		Typography: typography,
	}
	styleName := r.StyleName.ValueString()
	useCustomTheme := new(bool)
	if !r.UseCustomTheme.IsUnknown() && !r.UseCustomTheme.IsNull() {
		*useCustomTheme = r.UseCustomTheme.ValueBool()
	} else {
		useCustomTheme = nil
	}
	var user *shared.UpdateDesignReqUser
	if r.User != nil {
		emailaddress := new(string)
		if !r.User.Emailaddress.IsUnknown() && !r.User.Emailaddress.IsNull() {
			*emailaddress = r.User.Emailaddress.ValueString()
		} else {
			emailaddress = nil
		}
		fullname := new(string)
		if !r.User.Fullname.IsUnknown() && !r.User.Fullname.IsNull() {
			*fullname = r.User.Fullname.ValueString()
		} else {
			fullname = nil
		}
		name2 := new(string)
		if !r.User.Name.IsUnknown() && !r.User.Name.IsNull() {
			*name2 = r.User.Name.ValueString()
		} else {
			name2 = nil
		}
		userid := new(string)
		if !r.User.Userid.IsUnknown() && !r.User.Userid.IsNull() {
			*userid = r.User.Userid.ValueString()
		} else {
			userid = nil
		}
		user = &shared.UpdateDesignReqUser{
			Emailaddress: emailaddress,
			Fullname:     fullname,
			Name:         name2,
			Userid:       userid,
		}
	}
	out := shared.UpdateDesignReqDesign{
		BrandID:        brandID,
		BrandName:      brandName,
		CreatedAt:      createdAt,
		CreatedBy:      createdBy,
		CustomTheme:    customTheme,
		Edited:         edited,
		ID:             id,
		LastModifiedAt: lastModifiedAt,
		Style:          style,
		StyleName:      styleName,
		UseCustomTheme: useCustomTheme,
		User:           user,
	}
	return &out
}
