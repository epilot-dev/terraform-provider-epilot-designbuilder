// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-designbuilder/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-designbuilder/internal/sdk/pkg/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &DesignDataSource{}
var _ datasource.DataSourceWithConfigure = &DesignDataSource{}

func NewDesignDataSource() datasource.DataSource {
	return &DesignDataSource{}
}

// DesignDataSource is the data source implementation.
type DesignDataSource struct {
	client *sdk.SDK
}

// DesignDataSourceModel describes the data model.
type DesignDataSourceModel struct {
	Design *GetDesignResDesign `tfsdk:"design"`
	ID     types.String        `tfsdk:"id"`
}

// Metadata returns the data source type name.
func (r *DesignDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_design"
}

// Schema defines the schema for the data source.
func (r *DesignDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Design DataSource",

		Attributes: map[string]schema.Attribute{
			"design": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"brand_id": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"str": schema.StringAttribute{
								Computed: true,
							},
							"number": schema.NumberAttribute{
								Computed: true,
							},
						},
					},
					"brand_name": schema.StringAttribute{
						Computed: true,
					},
					"created_at": schema.StringAttribute{
						Computed:    true,
						Description: `Creation date and time using ISO 8601 full-time format`,
					},
					"created_by": schema.StringAttribute{
						Computed: true,
					},
					"custom_theme": schema.SingleNestedAttribute{
						Computed:   true,
						Attributes: map[string]schema.Attribute{},
					},
					"edited": schema.BoolAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"last_modified_at": schema.StringAttribute{
						Computed: true,
					},
					"style": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"consumer": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"customer_portals": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"widgets": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
								},
							},
							"logo": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"main": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"display_name": schema.StringAttribute{
												Computed: true,
											},
											"file_type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["LOGO", "FONT"]`,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"s3_object_key": schema.StringAttribute{
												Computed: true,
											},
											"url": schema.StringAttribute{
												Computed: true,
											},
										},
									},
								},
							},
							"palette": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"background": schema.StringAttribute{
										Computed: true,
									},
									"error": schema.StringAttribute{
										Computed: true,
									},
									"navbar": schema.StringAttribute{
										Computed: true,
									},
									"paper": schema.StringAttribute{
										Computed: true,
									},
									"primary": schema.StringAttribute{
										Computed: true,
									},
									"secondary": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"typography": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"font": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"font_family": schema.StringAttribute{
												Computed: true,
											},
											"font_id": schema.StringAttribute{
												Computed: true,
											},
											"font_name": schema.StringAttribute{
												Computed: true,
											},
											"font_weight_bold": schema.StringAttribute{
												Computed: true,
											},
											"font_weight_medium": schema.StringAttribute{
												Computed: true,
											},
											"font_weight_regular": schema.StringAttribute{
												Computed: true,
											},
											"urls": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"primary": schema.StringAttribute{
										Computed: true,
									},
									"secondary": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
					},
					"style_name": schema.StringAttribute{
						Computed: true,
					},
					"use_custom_theme": schema.BoolAttribute{
						Computed: true,
					},
					"user": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"emailaddress": schema.StringAttribute{
								Computed: true,
							},
							"fullname": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"userid": schema.StringAttribute{
								Computed: true,
							},
						},
					},
				},
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `Id of the design`,
			},
		},
	}
}

func (r *DesignDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *DesignDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *DesignDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	designID := data.ID.ValueString()
	request := operations.GetDesignRequest{
		DesignID: designID,
	}
	res, err := r.client.GetDesign(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.GetDesignRes == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedGetDesignRes(res.GetDesignRes)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
