// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-journey/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
)

func (r *JourneyResourceModel) ToSharedJourneyCreationRequestV2() *shared.JourneyCreationRequestV2 {
	var additionalProperties interface{}
	if !r.AdditionalProperties.IsUnknown() && !r.AdditionalProperties.IsNull() {
		_ = json.Unmarshal([]byte(r.AdditionalProperties.ValueString()), &additionalProperties)
	}
	brandID := new(string)
	if !r.BrandID.IsUnknown() && !r.BrandID.IsNull() {
		*brandID = r.BrandID.ValueString()
	} else {
		brandID = nil
	}
	createdBy := new(string)
	if !r.CreatedBy.IsUnknown() && !r.CreatedBy.IsNull() {
		*createdBy = r.CreatedBy.ValueString()
	} else {
		createdBy = nil
	}
	var design *shared.JourneyCreationRequestV2Design
	if r.Design != nil {
		logoURL := new(string)
		if !r.Design.LogoURL.IsUnknown() && !r.Design.LogoURL.IsNull() {
			*logoURL = r.Design.LogoURL.ValueString()
		} else {
			logoURL = nil
		}
		theme := make(map[string]interface{})
		for themeKey, themeValue := range r.Design.Theme {
			var themeInst interface{}
			_ = json.Unmarshal([]byte(themeValue.ValueString()), &themeInst)
			theme[themeKey] = themeInst
		}
		design = &shared.JourneyCreationRequestV2Design{
			LogoURL: logoURL,
			Theme:   theme,
		}
	}
	journeyID := new(string)
	if !r.JourneyID.IsUnknown() && !r.JourneyID.IsNull() {
		*journeyID = r.JourneyID.ValueString()
	} else {
		journeyID = nil
	}
	var logics []shared.JourneyCreationRequestV2Logics = nil
	for _, logicsItem := range r.Logics {
		var actions []string = nil
		for _, actionsItem := range logicsItem.Actions {
			actions = append(actions, actionsItem.ValueString())
		}
		autoGeneratedID := new(string)
		if !logicsItem.AutoGeneratedID.IsUnknown() && !logicsItem.AutoGeneratedID.IsNull() {
			*autoGeneratedID = logicsItem.AutoGeneratedID.ValueString()
		} else {
			autoGeneratedID = nil
		}
		var conditions []string = nil
		for _, conditionsItem := range logicsItem.Conditions {
			conditions = append(conditions, conditionsItem.ValueString())
		}
		logics = append(logics, shared.JourneyCreationRequestV2Logics{
			Actions:         actions,
			AutoGeneratedID: autoGeneratedID,
			Conditions:      conditions,
		})
	}
	name := r.Name.ValueString()
	organizationID := new(string)
	if !r.OrganizationID.IsUnknown() && !r.OrganizationID.IsNull() {
		*organizationID = r.OrganizationID.ValueString()
	} else {
		organizationID = nil
	}
	var rules []shared.JourneyCreationRequestV2Rules = nil
	for _, rulesItem := range r.Rules {
		source := rulesItem.Source.ValueString()
		sourceType := shared.JourneyCreationRequestV2SourceType(rulesItem.SourceType.ValueString())
		target := rulesItem.Target.ValueString()
		typeVar := shared.JourneyCreationRequestV2Type(rulesItem.Type.ValueString())
		rules = append(rules, shared.JourneyCreationRequestV2Rules{
			Source:     source,
			SourceType: sourceType,
			Target:     target,
			Type:       typeVar,
		})
	}
	var settings *shared.JourneyCreationRequestV2Settings
	if r.Settings != nil {
		addressSuggestionsFileURL := new(string)
		if !r.Settings.AddressSuggestionsFileURL.IsUnknown() && !r.Settings.AddressSuggestionsFileURL.IsNull() {
			*addressSuggestionsFileURL = r.Settings.AddressSuggestionsFileURL.ValueString()
		} else {
			addressSuggestionsFileURL = nil
		}
		description := new(string)
		if !r.Settings.Description.IsUnknown() && !r.Settings.Description.IsNull() {
			*description = r.Settings.Description.ValueString()
		} else {
			description = nil
		}
		designID := new(string)
		if !r.Settings.DesignID.IsUnknown() && !r.Settings.DesignID.IsNull() {
			*designID = r.Settings.DesignID.ValueString()
		} else {
			designID = nil
		}
		var embedOptions *shared.JourneyCreationRequestV2EmbedOptions
		if r.Settings.EmbedOptions != nil {
			var button *shared.JourneyCreationRequestV2Button
			if r.Settings.EmbedOptions.Button != nil {
				align := new(shared.JourneyCreationRequestV2Align)
				if !r.Settings.EmbedOptions.Button.Align.IsUnknown() && !r.Settings.EmbedOptions.Button.Align.IsNull() {
					*align = shared.JourneyCreationRequestV2Align(r.Settings.EmbedOptions.Button.Align.ValueString())
				} else {
					align = nil
				}
				text := new(string)
				if !r.Settings.EmbedOptions.Button.Text.IsUnknown() && !r.Settings.EmbedOptions.Button.Text.IsNull() {
					*text = r.Settings.EmbedOptions.Button.Text.ValueString()
				} else {
					text = nil
				}
				button = &shared.JourneyCreationRequestV2Button{
					Align: align,
					Text:  text,
				}
			}
			lang := new(shared.JourneyCreationRequestV2Lang)
			if !r.Settings.EmbedOptions.Lang.IsUnknown() && !r.Settings.EmbedOptions.Lang.IsNull() {
				*lang = shared.JourneyCreationRequestV2Lang(r.Settings.EmbedOptions.Lang.ValueString())
			} else {
				lang = nil
			}
			mode := new(shared.JourneyCreationRequestV2Mode)
			if !r.Settings.EmbedOptions.Mode.IsUnknown() && !r.Settings.EmbedOptions.Mode.IsNull() {
				*mode = shared.JourneyCreationRequestV2Mode(r.Settings.EmbedOptions.Mode.ValueString())
			} else {
				mode = nil
			}
			scrollToTop := new(bool)
			if !r.Settings.EmbedOptions.ScrollToTop.IsUnknown() && !r.Settings.EmbedOptions.ScrollToTop.IsNull() {
				*scrollToTop = r.Settings.EmbedOptions.ScrollToTop.ValueBool()
			} else {
				scrollToTop = nil
			}
			topBar := new(bool)
			if !r.Settings.EmbedOptions.TopBar.IsUnknown() && !r.Settings.EmbedOptions.TopBar.IsNull() {
				*topBar = r.Settings.EmbedOptions.TopBar.ValueBool()
			} else {
				topBar = nil
			}
			width := new(string)
			if !r.Settings.EmbedOptions.Width.IsUnknown() && !r.Settings.EmbedOptions.Width.IsNull() {
				*width = r.Settings.EmbedOptions.Width.ValueString()
			} else {
				width = nil
			}
			embedOptions = &shared.JourneyCreationRequestV2EmbedOptions{
				Button:      button,
				Lang:        lang,
				Mode:        mode,
				ScrollToTop: scrollToTop,
				TopBar:      topBar,
				Width:       width,
			}
		}
		entityID := new(string)
		if !r.Settings.EntityID.IsUnknown() && !r.Settings.EntityID.IsNull() {
			*entityID = r.Settings.EntityID.ValueString()
		} else {
			entityID = nil
		}
		var entityTags []string = nil
		for _, entityTagsItem := range r.Settings.EntityTags {
			entityTags = append(entityTags, entityTagsItem.ValueString())
		}
		var filePurposes []string = nil
		for _, filePurposesItem := range r.Settings.FilePurposes {
			filePurposes = append(filePurposes, filePurposesItem.ValueString())
		}
		mappingsAutomationID := new(string)
		if !r.Settings.MappingsAutomationID.IsUnknown() && !r.Settings.MappingsAutomationID.IsNull() {
			*mappingsAutomationID = r.Settings.MappingsAutomationID.ValueString()
		} else {
			mappingsAutomationID = nil
		}
		organizationSettings := make(map[string]bool)
		for organizationSettingsKey, organizationSettingsValue := range r.Settings.OrganizationSettings {
			organizationSettingsInst := organizationSettingsValue.ValueBool()
			organizationSettings[organizationSettingsKey] = organizationSettingsInst
		}
		publicToken := new(string)
		if !r.Settings.PublicToken.IsUnknown() && !r.Settings.PublicToken.IsNull() {
			*publicToken = r.Settings.PublicToken.ValueString()
		} else {
			publicToken = nil
		}
		var runtimeEntities []shared.JourneyCreationRequestV2RuntimeEntities = nil
		for _, runtimeEntitiesItem := range r.Settings.RuntimeEntities {
			runtimeEntities = append(runtimeEntities, shared.JourneyCreationRequestV2RuntimeEntities(runtimeEntitiesItem.ValueString()))
		}
		safeModeAutomation := new(bool)
		if !r.Settings.SafeModeAutomation.IsUnknown() && !r.Settings.SafeModeAutomation.IsNull() {
			*safeModeAutomation = r.Settings.SafeModeAutomation.ValueBool()
		} else {
			safeModeAutomation = nil
		}
		targetedCustomer := new(string)
		if !r.Settings.TargetedCustomer.IsUnknown() && !r.Settings.TargetedCustomer.IsNull() {
			*targetedCustomer = r.Settings.TargetedCustomer.ValueString()
		} else {
			targetedCustomer = nil
		}
		templateID := new(string)
		if !r.Settings.TemplateID.IsUnknown() && !r.Settings.TemplateID.IsNull() {
			*templateID = r.Settings.TemplateID.ValueString()
		} else {
			templateID = nil
		}
		settings = &shared.JourneyCreationRequestV2Settings{
			AddressSuggestionsFileURL: addressSuggestionsFileURL,
			Description:               description,
			DesignID:                  designID,
			EmbedOptions:              embedOptions,
			EntityID:                  entityID,
			EntityTags:                entityTags,
			FilePurposes:              filePurposes,
			MappingsAutomationID:      mappingsAutomationID,
			OrganizationSettings:      organizationSettings,
			PublicToken:               publicToken,
			RuntimeEntities:           runtimeEntities,
			SafeModeAutomation:        safeModeAutomation,
			TargetedCustomer:          targetedCustomer,
			TemplateID:                templateID,
		}
	}
	var steps []shared.JourneyCreationRequestV2Steps = nil
	for _, stepsItem := range r.Steps {
		hideNextButton := new(bool)
		if !stepsItem.HideNextButton.IsUnknown() && !stepsItem.HideNextButton.IsNull() {
			*hideNextButton = stepsItem.HideNextButton.ValueBool()
		} else {
			hideNextButton = nil
		}
		name1 := stepsItem.Name.ValueString()
		var schema interface{}
		_ = json.Unmarshal([]byte(stepsItem.Schema.ValueString()), &schema)
		showStepName := new(bool)
		if !stepsItem.ShowStepName.IsUnknown() && !stepsItem.ShowStepName.IsNull() {
			*showStepName = stepsItem.ShowStepName.ValueBool()
		} else {
			showStepName = nil
		}
		showStepSubtitle := new(bool)
		if !stepsItem.ShowStepSubtitle.IsUnknown() && !stepsItem.ShowStepSubtitle.IsNull() {
			*showStepSubtitle = stepsItem.ShowStepSubtitle.ValueBool()
		} else {
			showStepSubtitle = nil
		}
		showStepper := new(bool)
		if !stepsItem.ShowStepper.IsUnknown() && !stepsItem.ShowStepper.IsNull() {
			*showStepper = stepsItem.ShowStepper.ValueBool()
		} else {
			showStepper = nil
		}
		showStepperLabels := new(bool)
		if !stepsItem.ShowStepperLabels.IsUnknown() && !stepsItem.ShowStepperLabels.IsNull() {
			*showStepperLabels = stepsItem.ShowStepperLabels.ValueBool()
		} else {
			showStepperLabels = nil
		}
		stepID := new(string)
		if !stepsItem.StepID.IsUnknown() && !stepsItem.StepID.IsNull() {
			*stepID = stepsItem.StepID.ValueString()
		} else {
			stepID = nil
		}
		subTitle := new(string)
		if !stepsItem.SubTitle.IsUnknown() && !stepsItem.SubTitle.IsNull() {
			*subTitle = stepsItem.SubTitle.ValueString()
		} else {
			subTitle = nil
		}
		title := new(string)
		if !stepsItem.Title.IsUnknown() && !stepsItem.Title.IsNull() {
			*title = stepsItem.Title.ValueString()
		} else {
			title = nil
		}
		var uischema interface{}
		_ = json.Unmarshal([]byte(stepsItem.Uischema.ValueString()), &uischema)
		steps = append(steps, shared.JourneyCreationRequestV2Steps{
			HideNextButton:    hideNextButton,
			Name:              name1,
			Schema:            schema,
			ShowStepName:      showStepName,
			ShowStepSubtitle:  showStepSubtitle,
			ShowStepper:       showStepper,
			ShowStepperLabels: showStepperLabels,
			StepID:            stepID,
			SubTitle:          subTitle,
			Title:             title,
			Uischema:          uischema,
		})
	}
	out := shared.JourneyCreationRequestV2{
		AdditionalProperties: additionalProperties,
		BrandID:              brandID,
		CreatedBy:            createdBy,
		Design:               design,
		JourneyID:            journeyID,
		Logics:               logics,
		Name:                 name,
		OrganizationID:       organizationID,
		Rules:                rules,
		Settings:             settings,
		Steps:                steps,
	}
	return &out
}

func (r *JourneyResourceModel) RefreshFromSharedJourney(resp *shared.Journey) {
	if resp.AdditionalProperties == nil {
		r.AdditionalProperties = types.StringNull()
	} else {
		additionalPropertiesResult, _ := json.Marshal(resp.AdditionalProperties)
		r.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
	}
	r.BrandID = types.StringPointerValue(resp.BrandID)
	r.CreatedAt = types.StringValue(resp.CreatedAt)
	r.CreatedBy = types.StringPointerValue(resp.CreatedBy)
	if resp.Design == nil {
		r.Design = nil
	} else {
		r.Design = &JourneyCreationRequestV2Design{}
		r.Design.LogoURL = types.StringPointerValue(resp.Design.LogoURL)
		if len(resp.Design.Theme) > 0 {
			r.Design.Theme = make(map[string]types.String)
			for key, value := range resp.Design.Theme {
				result, _ := json.Marshal(value)
				r.Design.Theme[key] = types.StringValue(string(result))
			}
		}
	}
	r.JourneyID = types.StringPointerValue(resp.JourneyID)
	r.LastModifiedAt = types.StringValue(resp.LastModifiedAt)
	if len(r.Logics) > len(resp.Logics) {
		r.Logics = r.Logics[:len(resp.Logics)]
	}
	for logicsCount, logicsItem := range resp.Logics {
		var logics1 Logics
		logics1.Actions = nil
		for _, v := range logicsItem.Actions {
			logics1.Actions = append(logics1.Actions, types.StringValue(v))
		}
		logics1.AutoGeneratedID = types.StringPointerValue(logicsItem.AutoGeneratedID)
		logics1.Conditions = nil
		for _, v := range logicsItem.Conditions {
			logics1.Conditions = append(logics1.Conditions, types.StringValue(v))
		}
		if logicsCount+1 > len(r.Logics) {
			r.Logics = append(r.Logics, logics1)
		} else {
			r.Logics[logicsCount].Actions = logics1.Actions
			r.Logics[logicsCount].AutoGeneratedID = logics1.AutoGeneratedID
			r.Logics[logicsCount].Conditions = logics1.Conditions
		}
	}
	r.Name = types.StringValue(resp.Name)
	r.OrganizationID = types.StringValue(resp.OrganizationID)
	r.Revisions = types.NumberValue(big.NewFloat(float64(resp.Revisions)))
	if len(r.Rules) > len(resp.Rules) {
		r.Rules = r.Rules[:len(resp.Rules)]
	}
	for rulesCount, rulesItem := range resp.Rules {
		var rules1 Rules
		rules1.Source = types.StringValue(rulesItem.Source)
		rules1.SourceType = types.StringValue(string(rulesItem.SourceType))
		rules1.Target = types.StringValue(rulesItem.Target)
		rules1.Type = types.StringValue(string(rulesItem.Type))
		if rulesCount+1 > len(r.Rules) {
			r.Rules = append(r.Rules, rules1)
		} else {
			r.Rules[rulesCount].Source = rules1.Source
			r.Rules[rulesCount].SourceType = rules1.SourceType
			r.Rules[rulesCount].Target = rules1.Target
			r.Rules[rulesCount].Type = rules1.Type
		}
	}
	if resp.Settings == nil {
		r.Settings = nil
	} else {
		r.Settings = &JourneyCreationRequestV2Settings{}
		r.Settings.AddressSuggestionsFileURL = types.StringPointerValue(resp.Settings.AddressSuggestionsFileURL)
		r.Settings.Description = types.StringPointerValue(resp.Settings.Description)
		r.Settings.DesignID = types.StringValue(resp.Settings.DesignID)
		if resp.Settings.EmbedOptions == nil {
			r.Settings.EmbedOptions = nil
		} else {
			r.Settings.EmbedOptions = &JourneyCreationRequestV2EmbedOptions{}
			if resp.Settings.EmbedOptions.Button == nil {
				r.Settings.EmbedOptions.Button = nil
			} else {
				r.Settings.EmbedOptions.Button = &JourneyCreationRequestV2Button{}
				if resp.Settings.EmbedOptions.Button.Align != nil {
					r.Settings.EmbedOptions.Button.Align = types.StringValue(string(*resp.Settings.EmbedOptions.Button.Align))
				} else {
					r.Settings.EmbedOptions.Button.Align = types.StringNull()
				}
				r.Settings.EmbedOptions.Button.Text = types.StringPointerValue(resp.Settings.EmbedOptions.Button.Text)
			}
			if resp.Settings.EmbedOptions.Lang != nil {
				r.Settings.EmbedOptions.Lang = types.StringValue(string(*resp.Settings.EmbedOptions.Lang))
			} else {
				r.Settings.EmbedOptions.Lang = types.StringNull()
			}
			if resp.Settings.EmbedOptions.Mode != nil {
				r.Settings.EmbedOptions.Mode = types.StringValue(string(*resp.Settings.EmbedOptions.Mode))
			} else {
				r.Settings.EmbedOptions.Mode = types.StringNull()
			}
			r.Settings.EmbedOptions.ScrollToTop = types.BoolPointerValue(resp.Settings.EmbedOptions.ScrollToTop)
			r.Settings.EmbedOptions.TopBar = types.BoolPointerValue(resp.Settings.EmbedOptions.TopBar)
			r.Settings.EmbedOptions.Width = types.StringPointerValue(resp.Settings.EmbedOptions.Width)
		}
		r.Settings.EntityID = types.StringPointerValue(resp.Settings.EntityID)
		r.Settings.EntityTags = nil
		for _, v := range resp.Settings.EntityTags {
			r.Settings.EntityTags = append(r.Settings.EntityTags, types.StringValue(v))
		}
		r.Settings.FilePurposes = nil
		for _, v := range resp.Settings.FilePurposes {
			r.Settings.FilePurposes = append(r.Settings.FilePurposes, types.StringValue(v))
		}
		r.Settings.MappingsAutomationID = types.StringPointerValue(resp.Settings.MappingsAutomationID)
		if len(resp.Settings.OrganizationSettings) > 0 {
			r.Settings.OrganizationSettings = make(map[string]types.Bool)
			for key1, value1 := range resp.Settings.OrganizationSettings {
				r.Settings.OrganizationSettings[key1] = types.BoolValue(value1)
			}
		}
		r.Settings.PublicToken = types.StringPointerValue(resp.Settings.PublicToken)
		r.Settings.RuntimeEntities = nil
		for _, v := range resp.Settings.RuntimeEntities {
			r.Settings.RuntimeEntities = append(r.Settings.RuntimeEntities, types.StringValue(string(v)))
		}
		r.Settings.SafeModeAutomation = types.BoolPointerValue(resp.Settings.SafeModeAutomation)
		r.Settings.TargetedCustomer = types.StringPointerValue(resp.Settings.TargetedCustomer)
		r.Settings.TemplateID = types.StringPointerValue(resp.Settings.TemplateID)
	}
	if len(r.Steps) > len(resp.Steps) {
		r.Steps = r.Steps[:len(resp.Steps)]
	}
	for stepsCount, stepsItem := range resp.Steps {
		var steps1 Steps
		steps1.HideNextButton = types.BoolPointerValue(stepsItem.HideNextButton)
		steps1.Name = types.StringValue(stepsItem.Name)
		schemaResult, _ := json.Marshal(stepsItem.Schema)
		steps1.Schema = types.StringValue(string(schemaResult))
		steps1.ShowStepName = types.BoolPointerValue(stepsItem.ShowStepName)
		steps1.ShowStepper = types.BoolPointerValue(stepsItem.ShowStepper)
		steps1.ShowStepperLabels = types.BoolPointerValue(stepsItem.ShowStepperLabels)
		steps1.ShowStepSubtitle = types.BoolPointerValue(stepsItem.ShowStepSubtitle)
		steps1.StepID = types.StringPointerValue(stepsItem.StepID)
		steps1.SubTitle = types.StringPointerValue(stepsItem.SubTitle)
		steps1.Title = types.StringPointerValue(stepsItem.Title)
		uischemaResult, _ := json.Marshal(stepsItem.Uischema)
		steps1.Uischema = types.StringValue(string(uischemaResult))
		if stepsCount+1 > len(r.Steps) {
			r.Steps = append(r.Steps, steps1)
		} else {
			r.Steps[stepsCount].HideNextButton = steps1.HideNextButton
			r.Steps[stepsCount].Name = steps1.Name
			r.Steps[stepsCount].Schema = steps1.Schema
			r.Steps[stepsCount].ShowStepName = steps1.ShowStepName
			r.Steps[stepsCount].ShowStepper = steps1.ShowStepper
			r.Steps[stepsCount].ShowStepperLabels = steps1.ShowStepperLabels
			r.Steps[stepsCount].ShowStepSubtitle = steps1.ShowStepSubtitle
			r.Steps[stepsCount].StepID = steps1.StepID
			r.Steps[stepsCount].SubTitle = steps1.SubTitle
			r.Steps[stepsCount].Title = steps1.Title
			r.Steps[stepsCount].Uischema = steps1.Uischema
		}
	}
	r.Version = types.NumberValue(big.NewFloat(float64(resp.Version)))
}
